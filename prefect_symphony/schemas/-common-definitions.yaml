components:
  headers:
    ETagHeader:
      description: Unique identifier for a version of a resource
      schema:
        type: string
    locationHeader:
      description: URI for the resource
      schema:
        type: string
  parameters:
    afterParameter:
      description: Cursor value that specifies that the returned page of data should
        consist of records that come after this cursor value (essentially the "next"
        page).
      in: query
      name: after
      required: false
      schema:
        type: string
    beforeDateParameter:
      description: Date before which changes to a resource won't be considered.
      in: query
      name: beforeDate
      required: false
      schema:
        type: string
    beforeParameter:
      description: Cursor value that specifies that the returned page of data should
        consist of records that come before this cursor value (essentially the "previous"
        page).
      in: query
      name: before
      required: false
      schema:
        type: string
    expandParameter:
      description: Specifies which ID fields can be expanded to include the whole
        object for which the ID is a reference.  Value is a comma-separated list of
        fields containing IDs.
      example: userId,itemIds
      in: query
      name: expand
      required: false
      schema:
        type: string
    fieldsParameter:
      description: Specifies which resource fields to include.  If present, only the
        named fields are included. If not present, all fields are included.  The "id"
        and "eTag" fields are always included.
      example: name,type
      in: query
      name: fields
      required: false
      schema:
        type: string
    idPathParameter:
      description: The id of the resource to retrieve
      in: path
      name: id
      required: true
      schema:
        type: string
    ifMatchParameter:
      allowEmptyValue: false
      description: Current ETag value for the resource being mutated.  If the ETag
        value of the resource on the server doesn't match the value from the header,
        the resource will not be modified and a HTTP 412 response will be returned
        by the server.  The caller should GET the most recent version of the resource
        and try the request again. Only a single ETag value is supported.
      in: header
      name: If-Match
      required: true
      schema:
        type: string
    limitParameter:
      description: Specifies the maximum number of objects to return. It is possible
        that fewer than the specified number is returned, either due to reaching the
        end of the record set or due to data access rules that filter results of the
        back end query.  The number of returned objects should not be used to determine
        if there are more objects to retrieve.  Instead, the presence of the "next"
        and "previous" (see below) fields should be used.
      in: query
      name: limit
      required: false
      schema:
        default: 100
        format: int32
        maximum: 100
        minimum: 1
        type: integer
    qlParameter:
      description: Filter query using RSQL syntax.  Fields available for filtering
        should be specified in the documentation for each resource.
      example: name=="Kill Bill";year=gt=2003
      in: query
      name: ql
      required: false
      schema:
        type: string
    sortOrderParameter:
      description: Specifies the sort order of the returned results.  This parameter
        is used instead of 'sort' parameter when the value upon which to sort records
        is not selectable by the caller. Only one of 'sort' or 'sortOrder' can be
        included in the query.  Possible values are 'asc' or 'desc'.
      example: asc
      in: query
      name: sortOrder
      required: false
      schema:
        type: string
    sortParameter:
      description: 'Specifies which field to use for sorting returned records when
        more than one record is returned.  Syntax is: sort=[+|-]<field name>, where
        ''+'' indicates ascending order and ''-'' indicates descending order.  This
        parameter is used instead of ''sortOrder'' when the value upon which to sort
        records is selectable by the caller.  Only one of ''sort'' or ''sortOrder''
        can be included in the query.  See endpoint description for the list of fields
        that can be used with this parameter.'
      example: +createdDate
      in: query
      name: sort
      required: false
      schema:
        type: string
  requestBodies:
    JsonPatchBody:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PagedResponse'
      description: Body for a JSON Patch request
      required: false
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Bad request
    Forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Forbidden.  Returned if the caller doesn't have the required entitlements
        to call an endpoint.
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Not found.  Returned if specified key is not found.
    PreconditionFailed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Precondition failed.  Returned if specified "If-Match" header doesn't
        match "ETag" from DB record to be deleted.
    SuccessNoContent:
      description: Successful response.  No response body.
    Unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      description: Unauthorized. Returned if JWT token verification failed.
  schemas:
    CommonProperties:
      description: Properties common to all resources
      properties:
        createdBy:
          description: ID of the user who created this resouces
          type: string
        createdDate:
          description: Date/time resouces was created in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sZ)
          format: date-time
          type: string
        eTag:
          description: Unique tag for current version of the object. Should be used
            with "If-Match" header to prevent lost updates.
          type: string
        id:
          description: Unique ID of the resource
          type: string
        updatedBy:
          description: ID of the user who last updated this resouces
          type: string
        updatedDate:
          description: Date/time of last update in ISO-8601 format (YYYY-MM-DDThh:mm:ss.sZ)
          format: date-time
          type: string
      type: object
    Error:
      description: Common error response body
      properties:
        code:
          description: An internal code that can be used by support/developers to
            quickly locate the line of code that generated the error response.
          type: string
        context:
          additionalProperties:
            type: string
          description: A name-value map of variables and their value necessary to
            construct the message
          type: object
        details:
          description: Additional data that might be included
          type: object
        message:
          description: A human-readable error message
          type: string
      required:
      - code
      - message
    JsonPatch:
      items:
        $ref: '#/components/schemas/PatchOperation'
      type: array
    PagedResponse:
      description: Common top level object defining envelope for endpoints that return
        paged data
      properties:
        data:
          description: A page of data.  Type depends on resource being accessed.
          items:
            type: object
          type: array
        pagination:
          $ref: '#/components/schemas/Pagination'
      required:
      - data
      - pagination
    Pagination:
      description: Pagination information
      properties:
        cursors:
          $ref: '#/components/schemas/PaginationCursors'
        next:
          description: Path to retrieve the next page of data. If not present, the
            current page is the last page of data.
          type: string
        previous:
          description: Path to retrieve the previous page of data. If not present,
            the current page is the first page of data.
          type: string
      required:
      - cursors
    PaginationCursors:
      description: Cursors for pagination
      properties:
        after:
          description: Cursor that points to the end of the current page of data.  If
            not present, the current page is the last page.
          type: string
        before:
          description: Cursor that points to the start of the current page of data.  If
            not present, the current page is the first page.
          type: string
    PatchOperation:
      description: A JSONPatch operation as defined by RFC 6902
      properties:
        from:
          description: A string containing a JSON Pointer value.
          type: string
        op:
          description: The operation to be performed
          enum:
          - add
          - remove
          - replace
          - move
          - copy
          - test
          type: string
        path:
          description: A JSON-Pointer
          type: string
        value:
          description: The value to be used within the operations.
          type: object
info:
  description: A set of standard objects that should be used by all microservices
    when defining their API contracts
  title: Symphony API - Common Objects
  version: 1.0.0
openapi: 3.0.0
paths: {}
