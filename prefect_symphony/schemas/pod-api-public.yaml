definitions:
  AdminJustifiedAction:
    properties:
      justification:
        description: The reason for the requested action.
        type: string
    type: object
  AdminJustifiedUserAction:
    properties:
      justification:
        description: The reason for the requested action.
        type: string
      userId:
        description: The userId of the target user.
        format: int64
        type: integer
    type: object
  AppAuthenticationKey:
    description: App RSA key information.
    properties:
      action:
        description: "Action to be performed on the RSA key.\nThe following actions\
          \ can be performed onto the app's active RSA key:\n  - SAVE\n  - REVOKE\n\
          The following actions can be performed onto the app's rotated RSA key:\n\
          \  - REVOKE\n  - EXTEND\n"
        type: string
      expirationDate:
        description: RSA key expiration date. This value is set just for rotated keys.
        format: int64
        type: integer
      key:
        description: Application RSA public key.
        type: string
    type: object
  AppAuthenticationKeys:
    description: App RSA keys information.
    properties:
      current:
        $ref: '#/definitions/AppAuthenticationKey'
      previous:
        $ref: '#/definitions/AppAuthenticationKey'
    type: object
  AppNotification:
    description: Application callback information
    properties:
      apiKey:
        description: apiKey sent into every callback request, using the X-API-KEY
          header
        type: string
      url:
        description: callback URL
        type: string
    type: object
  AppProperties:
    description: Application configuration properties that are shared with the extension
      application, client side. Do not store sensitive information here. Since SBE
      20.14.
    items:
      $ref: '#/definitions/AppProperty'
    type: array
    x-since: 20.14
  AppProperty:
    description: Application configuration property that is shared with the extension
      application, client side. Do not store sensitive information here.
    properties:
      key:
        description: Name of an application configuration property. It cannot be null
          or empty and its length is limited to 1024 characters. Keys are unique.
        type: string
      value:
        description: Value of an application configuration property. It cannot be
          null and its length is limited to 4096 characters. It can be empty.
        type: string
    type: object
  ApplicationDetail:
    description: Detailed record of application.
    properties:
      allowOrigins:
        description: 'The permitted domains to send or receive a request from.

          The field is for the purpose of CORS which set the app specific "ALLOW-ORIGIN-DOMAINS"
          header in HTTP.

          '
        type: string
      applicationInfo:
        $ref: '#/definitions/ApplicationInfo'
      authenticationKeys:
        $ref: '#/definitions/AppAuthenticationKeys'
      cert:
        description: The app public certificate in pem format.
        type: string
      description:
        description: Description of the application.
        type: string
      iconUrl:
        description: Url to a icon to use for app. Must start with "https://".
        type: string
      notification:
        $ref: '#/definitions/AppNotification'
      permissions:
        description: "List of application permissions provisioned for the application.\n\
          In addition to the known ones, custom permissions are accepted.\nA custom\
          \ permission should only contain upper case alphanumeric characters and\
          \ underscore.\nIt should not be empty or only contain spaces and its length\
          \ is limited to 64 characters.\n\nKnown permissions:\n  - SEND_MESSAGES\n\
          \  - GET_USER_CONNECTIONS\n  - REQUEST_USER_CONNECTIONS\n  - SET_PRESENCE\n\
          \  - GET_PRESENCE\n  - GET_BASIC_USER_INFO\n  - GET_EXTENDED_USER_INFO\n\
          \  - GET_BASIC_CONTACT_INFO\n  - GET_EXTENDED_CONTACT_INFO\n  - ACT_AS_USER\n\
          \  - MANAGE_SIGNALS\n  - MANAGE_USER_FOLLOWING\n  - TRUST_APP\n"
        items:
          maxLength: 64
          minLength: 1
          type: string
        type: array
      properties:
        $ref: '#/definitions/AppProperties'
    type: object
  ApplicationInfo:
    description: 'Required information for creating an application.

      '
    properties:
      appId:
        description: An unique id for the application.
        maxLength: 256
        minLength: 1
        type: string
      appUrl:
        description: The url for the app. Must start with "https://".
        type: string
      domain:
        description: Domain for app, that must match app url domain.
        type: string
      name:
        description: User defined name for the application.
        type: string
      publisher:
        description: The publisher for this application.
        type: string
    type: object
  AssigneeCandidate:
    description: Assignee Candidate
    properties:
      canBeAssigned:
        type: boolean
      emailAddress:
        type: string
      firstName:
        type: string
      roles:
        $ref: '#/definitions/StringList'
      surname:
        type: string
      userId:
        format: int64
        type: integer
      username:
        type: string
    type: object
  AssigneeCandidates:
    description: List of assignee candidate
    properties:
      pagination:
        $ref: '#/definitions/Pagination'
        type: object
      users:
        items:
          $ref: '#/definitions/AssigneeCandidate'
        type: array
    type: object
  AttachmentPreview:
    description: Preview file for image attachments
    properties:
      fileId:
        description: The preview file ID
        type: string
      width:
        description: The preview image width
        type: integer
    type: object
  Avatar:
    properties:
      size:
        description: The Avatar Size
        type: string
      url:
        description: Url of the image
        type: string
    type: object
  AvatarList:
    items:
      $ref: '#/definitions/Avatar'
    type: array
  AvatarUpdate:
    properties:
      image:
        description: Base64 encoded image. Original image must be less than 2MB.
        type: string
    type: object
  BulkActionResult:
    description: 'The results of list based bulk action. The list contains the result
      messages

      in the same order as submitted. The message will be an empty string if the action

      was successful for item in that index.

      '
    properties:
      overallResult:
        enum:
        - SUCCESS
        - FAIL
        type: string
      results:
        items:
          type: string
        type: array
  CertInfo:
    items:
      $ref: '#/definitions/CertInfoItem'
    type: array
  CertInfoItem:
    properties:
      attributes:
        items:
          $ref: '#/definitions/NameValuePair'
        type: array
      name:
        type: string
    type: object
  CompanyCert:
    properties:
      attributes:
        $ref: '#/definitions/CompanyCertAttributes'
      pem:
        description: An X509 certificate in PEM format
        type: string
    type: object
  CompanyCertAttributes:
    properties:
      name:
        description: Friendly name assigned by administrator
        type: string
      status:
        $ref: '#/definitions/CompanyCertStatus'
      type:
        $ref: '#/definitions/CompanyCertType'
    type: object
  CompanyCertDetail:
    properties:
      certInfo:
        $ref: '#/definitions/CertInfo'
      companyCertAttributes:
        $ref: '#/definitions/CompanyCertAttributes'
      companyCertInfo:
        $ref: '#/definitions/CompanyCertInfo'
    type: object
  CompanyCertInfo:
    properties:
      commonName:
        description: The Symphony account name which this certificate authenticates
        type: string
      expiryDate:
        description: Expiry date of this cert
        format: int64
        type: integer
      fingerPrint:
        description: Unique identifier
        type: string
      issuerFingerPrint:
        description: Unique identifier of issuer cert if known
        type: string
      lastSeen:
        description: Date when we last saw this certificate presented
        format: int64
        type: integer
      updatedAt:
        description: Date when this cert was last updated by administrator
        format: int64
        type: integer
      updatedBy:
        description: User ID of administrator who last updated this cert
        format: int64
        type: integer
    type: object
  CompanyCertInfoList:
    items:
      properties:
        companyCertAttributes:
          $ref: '#/definitions/CompanyCertAttributes'
        companyCertInfo:
          $ref: '#/definitions/CompanyCertInfo'
      type: object
    type: array
  CompanyCertStatus:
    properties:
      type:
        enum:
        - TRUSTED
        - KNOWN
        - REVOKED
        - DISABLED
        type: string
    type: object
  CompanyCertType:
    properties:
      type:
        enum:
        - USERSIGNING
        - USER
        - OPERATIONSSIGNING
        - OPERATIONSUSER
        type: string
    type: object
  CompanyCertTypeList:
    items:
      $ref: '#/definitions/CompanyCertType'
    type: array
  ConversationSpecificStreamAttributes:
    properties:
      members:
        $ref: '#/definitions/UserIdList'
    type: object
  DelegateAction:
    properties:
      action:
        enum:
        - ADD
        - REMOVE
        type: string
      userId:
        format: int64
        type: integer
    type: object
  Disclaimer:
    properties:
      content:
        type: string
      createdDate:
        format: int64
        type: integer
      format:
        enum:
        - TEXT
        - XML
        type: string
      frequencyInHours:
        format: int32
        type: integer
      id:
        type: string
      isActive:
        type: boolean
      isDefault:
        type: boolean
      modifiedDate:
        format: int64
        type: integer
      name:
        type: string
    type: object
  DisclaimerList:
    items:
      $ref: '#/definitions/Disclaimer'
    type: array
  DownloadReceiptCount:
    properties:
      fileName:
        type: string
      timestamp:
        format: int64
        type: integer
    type: object
  Error:
    properties:
      code:
        format: int32
        type: integer
      message:
        type: string
    type: object
  FacetedMatchCount:
    description: An object respresenting the result count of faceted search.
    properties:
      count:
        description: The result count.
        type: integer
      facet:
        description: The matched query.
        type: string
  Feature:
    description: Entitlement feature record.
    properties:
      enabled:
        description: Whether this entitlement is enabled for the user.
        type: boolean
      entitlment:
        type: string
    type: object
  FeatureList:
    items:
      $ref: '#/definitions/Feature'
    type: array
  FileExtension:
    properties:
      extension:
        description: 'The file extension that this specific record is for.  This is
          a unique ID

          that allows this record to be referenced in the URI.

          '
        example: .txt
        type: string
      scope_external:
        description: 'File extension allowed for external scope

          '
        type: boolean
      scope_internal:
        description: 'File extension allowed for internal scope

          '
        type: boolean
      source:
        description: 'File extension with metadata understood by the system or file
          extension created by a customer

          '
        enum:
        - SYSTEM
        - CUSTOMER
        type: string
    required:
    - extension
    type: object
  FileExtensionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/FileExtension'
        type: array
    required:
    - data
    - paging
    type: object
  FollowersList:
    properties:
      followers:
        $ref: '#/definitions/UserIdList'
    type: object
  FollowersListResponse:
    properties:
      count:
        format: int64
        type: integer
      followers:
        items:
          format: int64
          type: integer
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    type: object
  FollowingListResponse:
    properties:
      count:
        format: int64
        type: integer
      following:
        items:
          format: int64
          type: integer
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
    type: object
  Group:
    description: Information Barrier Group record.
    properties:
      active:
        type: boolean
      createdDate:
        format: int64
        type: integer
      id:
        type: string
      memberCount:
        format: int32
        type: integer
      modifiedDate:
        format: int64
        type: integer
      name:
        type: string
      policies:
        items:
          type: string
        type: array
    type: object
  GroupItem:
    properties:
      addedBy:
        description: The user ID who added the group to the room.
        format: int64
        type: integer
      id:
        description: The ID of the added group (aka SDL).
        format: int64
        type: integer
    type: object
  GroupList:
    items:
      $ref: '#/definitions/Group'
    type: array
  GroupRoleScope:
    description: User Group info to include in other models
    properties:
      active:
        description: Group status
        type: boolean
      area:
        description: An optional string attribute used for categorizing groups
        type: string
      id:
        description: Group ID
        type: string
      name:
        description: Group name
        type: string
      type:
        description: Group type
        type: string
    type: object
  IMSystemInfo:
    properties:
      active:
        description: If false, no messages can be sent in this stream, and membership
          is locked.
        type: boolean
      creationDate:
        description: The datetime when the stream was originally created. Milliseconds
          since Jan 1 1970.
        format: int64
        type: integer
      id:
        type: string
    type: object
  ImmutableRoomAttributes:
    description: These attributes cannot be changed once the room has been created
    properties:
      copyProtected:
        description: If true, clients disable the clipboard copy for content in this
          stream.
        type: boolean
      public:
        description: If true, this is a public chatroom. IF false, a private chatroom.
        type: boolean
      readOnly:
        description: If true, only stream owners can send messages.
        type: boolean
    type: object
  IntegerList:
    items:
      format: int64
      type: integer
    type: array
  Languages:
    description: List of languages
    properties:
      languages:
        $ref: '#/definitions/StringList'
    type: object
  MemberInfo:
    description: Detailed membership record.
    properties:
      addedThroughGroups:
        description: When the user has been added to the stream through a group (aka
          SDL), this array contains the group ID which the user belongs to. Since
          SBE 20.14.
        items:
          format: int64
          type: integer
        type: array
        x-since: 20.14
      id:
        format: int64
        type: integer
      joinDate:
        format: int64
        type: integer
      owner:
        type: boolean
    type: object
  MembershipData:
    description: User object response
    properties:
      emailAddress:
        type: string
      firstName:
        type: string
      id:
        format: int64
        type: integer
      lastName:
        type: string
      userName:
        type: string
    type: object
  MembershipList:
    description: List of members in a room.
    items:
      $ref: '#/definitions/MemberInfo'
    type: array
  MessageDetail:
    description: Message detail
    properties:
      creationDate:
        format: int64
        type: integer
      creator:
        $ref: '#/definitions/MessageUser'
      deliveryReceiptCount:
        format: int64
        type: integer
      downloadReceiptCounts:
        items:
          $ref: '#/definitions/MessageDownloadReceiptCount'
        type: array
      emailNotificationCount:
        format: int64
        type: integer
      messageId:
        description: message id
        type: string
      onBehalfOfUser:
        $ref: '#/definitions/MessageUser'
      readReceiptCount:
        format: int64
        type: integer
      stream:
        $ref: '#/definitions/MessageStream'
    type: object
  MessageDetails:
    description: Message details
    items:
      $ref: '#/definitions/MessageDetail'
    type: array
  MessageDownloadReceiptCount:
    properties:
      count:
        format: int64
        type: integer
      fileName:
        type: string
    type: object
  MessageIds:
    properties:
      messageIds:
        $ref: '#/definitions/StringList'
    type: object
  MessageMetadataResponse:
    description: Message metadata
    properties:
      formReplies:
        items:
          type: string
        type: array
      forwards:
        items:
          type: string
        type: array
      messageId:
        type: string
      parent:
        properties:
          messageId:
            description: Id of the parent message queried
            type: string
          relationshipType:
            enum:
            - REPLY_FORM
            - REPLY
            - FORWARD
            type: string
        type: object
      replies:
        items:
          type: string
        type: array
    type: object
  MessageReceiptDetail:
    description: Message receipt details response object
    properties:
      deliveryReceiptTimestamp:
        description: Timestamp of message delivery receipts
        format: int64
        type: integer
      downloadReceiptCounts:
        items:
          $ref: '#/definitions/DownloadReceiptCount'
        type: array
      emailNotificationTimestamp:
        description: Timestamp of message email notifications
        format: int64
        type: integer
      readReceiptTimestamp:
        description: Timestamp of message read receipts
        format: int64
        type: integer
      user:
        $ref: '#/definitions/UserCompp'
    type: object
  MessageReceiptDetailResponse:
    description: List of Message receipt details
    properties:
      MessageReceiptDetail:
        items:
          $ref: '#/definitions/MessageReceiptDetail'
        type: array
      creationDate:
        format: int64
        type: integer
      creator:
        $ref: '#/definitions/MessageUser'
      deliveryReceiptCount:
        type: integer
      downloadReceiptCounts:
        items:
          $ref: '#/definitions/MessageDownloadReceiptCount'
        type: array
      emailNotificationCount:
        type: integer
      onBehalfOfUser:
        $ref: '#/definitions/MessageUser'
      pagination:
        $ref: '#/definitions/Pagination'
      readReceiptCount:
        type: integer
      stream:
        $ref: '#/definitions/MessageStream'
    type: object
  MessageStatus:
    description: 'Holds the status of a particular message, indicating which user
      the message has been sent, delivered or read.

      '
    properties:
      author:
        $ref: '#/definitions/MessageStatusUser'
        description: User who has sent the message.
        type: object
      delivered:
        description: 'All users who have at least one Symphony client to which the
          message has been delivered, and not read yet.

          '
        items:
          $ref: '#/definitions/MessageStatusUser'
        type: array
      read:
        description: All users who have read that message, in any Symphony client.
        items:
          $ref: '#/definitions/MessageStatusUser'
        type: array
      sent:
        description: 'All users to whom the message has been sent and received by
          the Symphony system,

          but not yet delivered to any user''s Symphony client.

          '
        items:
          $ref: '#/definitions/MessageStatusUser'
        type: array
    type: object
  MessageStatusUser:
    properties:
      displayName:
        type: string
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      timestamp:
        type: string
      userId:
        type: string
      userName:
        type: string
    type: object
  MessageStream:
    properties:
      id:
        type: string
      name:
        type: string
      streamType:
        type: string
    type: object
  MessageSuppressionResponse:
    description: The suppression state of a message
    properties:
      messageId:
        type: string
      suppressed:
        type: boolean
      suppressionDate:
        description: The date when this message was suppressed.
        format: int64
        type: integer
    type: object
  MessageUser:
    properties:
      id:
        format: int64
        type: integer
      name:
        type: string
    type: object
  NameValuePair:
    properties:
      name:
        type: string
      value:
        type: string
    type: object
  Pagination:
    properties:
      cursors:
        properties:
          after:
            description: 'This is the opaque url-safe string that points to the end
              of the page of data

              that has been returned.

              '
            example: NDMyNzQyODI3OTQw
            type: string
          before:
            description: 'This is the opaque url-safe string that points to the start
              of the page of data

              that has been returned.

              '
            example: MTAxNTExOTQ1MjAwNzI5NDE=
            type: string
        required:
        - before
        type: object
      next:
        description: 'API endpoint that will return the next page of data. If not
          included, this is the

          last page of data. Due to how pagination works with visibility and privacy,
          it is

          possible that a page may be empty but contain a ''next'' paging link. Stop
          paging when

          the ''next'' link no longer appears.

          '
        example: https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&after=NDMyNzQyODI3OTQw
        type: string
      previous:
        description: 'API endpoint that will return the previous page of data. If
          not included, this is

          the first page of data.

          '
        example: https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&before=MTAxNTExOTQ1MjAwNzI5NDE=
        type: string
    required:
    - cursors
    type: object
  Password:
    description: Password. Stored as derived password in both the Pod and the Key
      Manager using PBKDF2 function. Number of iterations should be 10000 and desired
      length 256 bits.
    properties:
      hPassword:
        description: Pod password derived with PBKDF2.
        type: string
      hSalt:
        description: Pod password salt used for PBKDF2 derivation.
        type: string
      khPassword:
        description: Key Manager password derived with PBKDF2.
        type: string
      khSalt:
        description: Key Manager password salt used for PBKDF2 derivation.
        type: string
    type: object
  PasswordReset:
    properties:
      type:
        enum:
        - EMAIL
        type: string
    type: object
  PodAppEntitlement:
    description: Application Entitlements for the company
    properties:
      appId:
        description: Unique ID for the Application
        maxLength: 256
        minLength: 1
        type: string
      appName:
        description: Name for this Application
        maxLength: 50
        minLength: 1
        type: string
      enable:
        type: boolean
      install:
        description: if true, the entitlement is set to automatic for the company.  Otherwise,
          it is set to manual.
        type: boolean
      listed:
        description: if true, this application will be listed in the appstore for
          everyone.  Otherwise, this application will be hidden in the appstore.
        type: boolean
    required:
    - appId
    - appName
    - enable
    - listed
    - install
    type: object
  PodAppEntitlementList:
    items:
      $ref: '#/definitions/PodAppEntitlement'
    type: array
  PodCertificate:
    properties:
      certificate:
        description: Certificate in PEM format
        type: string
    type: object
  Policy:
    description: Information Barrier Policy record.
    properties:
      active:
        type: boolean
      createdDate:
        format: int64
        type: integer
      groups:
        items:
          type: string
        type: array
      id:
        type: string
      memberCount:
        format: int32
        type: integer
      modifiedDate:
        format: int64
        type: integer
      policyType:
        enum:
        - BLOCK
        - ALLOW
        type: string
    type: object
  PolicyList:
    items:
      $ref: '#/definitions/Policy'
    type: array
  Product:
    description: Application Product
    properties:
      appId:
        description: App ID for the Product
        maxLength: 256
        minLength: 1
        type: string
      name:
        description: Product Name
        maxLength: 50
        minLength: 1
        type: string
      sku:
        description: Product SKU
        maxLength: 100
        minLength: 1
        type: string
      subscribed:
        description: indicate whether the product is subscribed or not
        type: boolean
      type:
        description: Product Type (default or premium)
        type: string
    required:
    - name
    - type
    - subscribed
    type: object
  ProductList:
    items:
      $ref: '#/definitions/Product'
    type: array
  Protocol:
    properties:
      scheme:
        description: 'URI protocol scheme (example: http, https, ftp)'
        type: string
    required:
    - scheme
    type: object
  Role:
    description: Role record.
    properties:
      description:
        type: string
      id:
        format: long
        type: string
      name:
        type: string
    type: object
  RoleDetail:
    description: Role detailed.
    properties:
      id:
        type: string
      name:
        type: string
      optionalActions:
        items:
          type: string
        type: array
      userTypes:
        items:
          type: string
        type: array
    type: object
  RoleDetailList:
    items:
      $ref: '#/definitions/RoleDetail'
    type: array
  RoleList:
    items:
      $ref: '#/definitions/Role'
    type: array
  RoomAttributes:
    properties:
      description:
        description: Room description.
        type: string
      discoverable:
        description: If true, this chatroom (name, description and messages) can be
          searched and listed by non-participants. If false, only participants can
          search this room.
        type: boolean
      membersCanInvite:
        description: If true, any chatroom participant can add new participants. If
          false, only owners can add new participants.
        type: boolean
      name:
        description: Room name.
        type: string
    type: object
  RoomDetail:
    properties:
      immutableRoomAttributes:
        $ref: '#/definitions/ImmutableRoomAttributes'
      roomAttributes:
        $ref: '#/definitions/RoomAttributes'
      roomSystemInfo:
        $ref: '#/definitions/RoomSystemInfo'
    type: object
  RoomSearchCriteria:
    description: Room Query Object. Used to specify the parameters for room search.
    properties:
      active:
        description: Restrict the search to active/inactive rooms. If unspecified,
          search all rooms.
        type: boolean
      creator:
        $ref: '#/definitions/UserId'
      labels:
        description: A list of room tag labels whose values will be queried.
        items:
          type: string
        type: array
      member:
        $ref: '#/definitions/UserId'
      owner:
        $ref: '#/definitions/UserId'
      private:
        description: Restrict the search to private rooms. If unspecified, search
          all rooms.
        type: boolean
      query:
        description: The search query. Matches the room name and description.
        type: string
      sortOrder:
        description: 'Sort algorithm to be used. Supports two values: "BASIC" (legacy
          algorithm)

          and "RELEVANCE" (enhanced algorithm).

          '
        enum:
        - BASIC
        - RELEVANCE
        type: string
    required:
    - query
  RoomSpecificStreamAttributes:
    properties:
      name:
        description: Room name.
        type: string
    type: object
  RoomSystemInfo:
    properties:
      active:
        description: If false, no messages can be sent in this stream, and membership
          is locked.
        type: boolean
      createdByUserId:
        format: int64
        type: integer
      creationDate:
        description: The datetime when the stream was originally created. Milliseconds
          since Jan 1 1970.
        format: int64
        type: integer
      id:
        type: string
    type: object
  RoomTag:
    description: Room Tag object. A key:value pair describing additional properties
      of the room.
    properties:
      key:
        description: A unique label of the Tag.
        type: string
      value:
        description: The value of this Tag's label.
        type: string
    required:
    - key
    - value
  Stream:
    properties:
      id:
        type: string
    type: object
  StreamAttachmentItem:
    description: File attachments for a message in a stream
    properties:
      content-type:
        type: string
      fileId:
        description: The attachment File ID.
        type: string
      ingestionDate:
        format: int64
        type: integer
      messageId:
        type: string
      name:
        description: The file name.
        type: string
      previews:
        items:
          $ref: '#/definitions/AttachmentPreview'
        type: array
      size:
        description: Size in bytes.
        format: int64
        type: integer
      userId:
        format: int64
        type: integer
    type: object
  StreamAttachmentResponse:
    items:
      $ref: '#/definitions/StreamAttachmentItem'
    type: array
  StreamAttributes:
    properties:
      active:
        description: If true, this stream is active.
        type: boolean
      crossPod:
        description: If true, this is a cross-pod stream.
        type: boolean
      id:
        description: The stream ID.
        type: string
      roomAttributes:
        $ref: '#/definitions/RoomSpecificStreamAttributes'
      streamAttributes:
        $ref: '#/definitions/ConversationSpecificStreamAttributes'
      streamType:
        $ref: '#/definitions/StreamType'
    type: object
  StreamFilter:
    description: Stream filtering parameters.
    properties:
      includeInactiveStreams:
        description: Whether to include inactive streams in the list of results.
        type: boolean
      streamTypes:
        description: Types of streams to search for.
        items:
          $ref: '#/definitions/StreamType'
        type: array
  StreamList:
    description: A list of streams of which the requesting user is a member.
    items:
      $ref: '#/definitions/StreamAttributes'
    type: array
  StreamType:
    properties:
      type:
        enum:
        - IM
        - MIM
        - ROOM
        - POST
        type: string
    type: object
  StringId:
    properties:
      id:
        type: string
    type: object
  StringList:
    items:
      type: string
    type: array
  SuccessResponse:
    properties:
      format:
        enum:
        - TEXT
        - XML
        type: string
      message:
        type: string
    type: object
  UserAppEntitlement:
    description: Application Entitlements for the user
    properties:
      appId:
        description: Unique ID for the Application
        maxLength: 256
        minLength: 1
        type: string
      appName:
        description: Name for this Application
        maxLength: 50
        minLength: 1
        type: string
      install:
        description: if true, it indicate this application is installed for this user.  Otherwise,
          this user does not have this application installed.
        type: boolean
      listed:
        description: if true, this application will be listed in the appstore for
          this user.  Otherwise, this application will be hidden in the appstore.
        type: boolean
      products:
        $ref: '#/definitions/ProductList'
    required:
    - appId
    - listed
    - install
    type: object
  UserAppEntitlementList:
    items:
      $ref: '#/definitions/UserAppEntitlement'
    type: array
  UserAppEntitlementPatch:
    description: Application Entitlements to patch for the user
    properties:
      appId:
        description: Unique ID for the Application
        maxLength: 256
        minLength: 1
        type: string
      install:
        default: KEEP
        description: If "TRUE", this application will be installed for this user.
          If "FALSE", this application will not be installed for this user. If "KEEP"
          or not set, the current value is kept. If "REMOVE", it will be removed from
          user settings and the pod level setting's value will be used.
        enum: &id001
        - 'TRUE'
        - 'FALSE'
        - KEEP
        - REMOVE
        type: string
      listed:
        default: KEEP
        description: If "TRUE", this application will be listed in the appstore for
          this user. If "FALSE", this application will be hidden in the appstore.
          If "KEEP" or not set, the current value is kept. If "REMOVE", it will be
          removed from user settings and the pod level setting's value will be used.
        enum: *id001
        type: string
      product:
        $ref: '#/definitions/Product'
    required:
    - appId
    type: object
  UserAppEntitlementPatchEnum:
    default: KEEP
    description: null
    properties:
      type:
        description: "UserAppEntitlementPatchEnum type :\n * TRUE - The parameter\
          \ should be set to true.\n * FALSE - The parameter should be set to false.\n\
          \ * KEEP - The parameter should not be updated, the current value will be\
          \ kept.\n * REMOVE - The parameter should be reverted to tenant level's\
          \ value.\n"
        enum: *id001
        type: string
    type: object
  UserAppEntitlementsPatchList:
    description: Array of app entitlements to patch for a user
    items:
      $ref: '#/definitions/UserAppEntitlementPatch'
    type: array
  UserAttributes:
    description: User record.
    properties:
      accountType:
        enum:
        - NORMAL
        - SYSTEM
        - SDL
        type: string
      assetClasses:
        items:
          type: string
        type: array
      companyName:
        type: string
      department:
        type: string
      displayName:
        type: string
      division:
        type: string
      emailAddress:
        type: string
      firstName:
        type: string
      industries:
        items:
          type: string
        type: array
      jobFunction:
        type: string
      lastName:
        type: string
      location:
        type: string
      mobilePhoneNumber:
        type: string
      smsNumber:
        type: string
      title:
        type: string
      userName:
        type: string
      workPhoneNumber:
        type: string
    type: object
  UserCompp:
    description: Basic user information to include in other models
    properties:
      emailAddress:
        description: User email addressIntegrationUserManagerTest
        type: string
      firstName:
        description: User first name
        type: string
      id:
        description: User ID
        format: int64
        type: integer
      lastName:
        description: User last name
        type: string
      username:
        description: Username
        type: string
    type: object
  UserConnection:
    description: Connection status between two users
    properties:
      firstRequestedAt:
        description: unix timestamp when the first request was made
        format: int64
        type: integer
      requestCounter:
        description: number of requests made
        format: int32
        type: integer
      status:
        description: Connection status between the requesting user and the request
          sender
        enum:
        - PENDING_INCOMING
        - PENDING_OUTGOING
        - ACCEPTED
        - REJECTED
        type: string
      updatedAt:
        description: unix timestamp on the last updated date
        format: int64
        type: integer
      userId:
        description: user id
        format: int64
        type: integer
    type: object
  UserConnectionList:
    items:
      $ref: '#/definitions/UserConnection'
    type: array
  UserConnectionRequest:
    description: Request body for the Connection APIs
    properties:
      userId:
        description: user id
        format: int64
        type: integer
    type: object
  UserData:
    description: User object response
    properties:
      emailAddress:
        type: string
      firstName:
        type: string
      id:
        format: int64
        type: integer
      lastName:
        type: string
      username:
        type: string
    type: object
  UserDetail:
    description: Detailed User record.
    properties:
      apps:
        $ref: '#/definitions/IntegerList'
      avatar:
        $ref: '#/definitions/Avatar'
      disclaimers:
        $ref: '#/definitions/IntegerList'
      features:
        $ref: '#/definitions/IntegerList'
      groups:
        $ref: '#/definitions/IntegerList'
      roles:
        $ref: '#/definitions/StringList'
      userAttributes:
        $ref: '#/definitions/UserAttributes'
      userSystemInfo:
        $ref: '#/definitions/UserSystemInfo'
    type: object
  UserDetailList:
    items:
      $ref: '#/definitions/UserDetail'
    type: array
  UserError:
    description: User error information
    properties:
      email:
        description: 'Email with error. Only one of the following fields should be
          present: email or id'
        type: string
      error:
        description: Error code informing what is wrong
        type: string
      id:
        description: 'Id with error. Only one of the following fields should be present:
          email or id'
        type: string
    type: object
  UserFilter:
    properties:
      feature:
        type: string
      role:
        description: The user role
        example: INDIVIDUAL
        type: string
      status:
        enum:
        - ENABLED
        - DISABLED
        type: string
    type: object
  UserGroupAssignee:
    description: User group assignee object
    properties:
      active:
        type: boolean
      group:
        $ref: '#/definitions/GroupRoleScope'
        description: Group
        type: object
      groupId:
        type: string
      id:
        description: Assignee id
        type: string
      lastAddedDate:
        description: Last added
        format: int64
        type: integer
      lastRemovedDate:
        description: Last removed
        format: int64
        type: integer
      user:
        $ref: '#/definitions/UserCompp'
        type: object
      userId:
        format: int64
        type: integer
      userRoles:
        items:
          type: string
        type: array
    type: object
  UserGroupAssigneeResponse:
    description: response
    properties:
      data:
        items:
          $ref: '#/definitions/UserGroupAssignee'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
        type: object
    type: object
  UserGroupAssigneeUpdate:
    description: Body for user group assignee update
    properties:
      current:
        description: Assignee status
        type: boolean
    required:
    - current
    type: object
  UserGroupAssignmentResponse:
    description: User Group assignment response object
    properties:
      active:
        description: Group membership status
        type: boolean
      group:
        $ref: '#/definitions/GroupRoleScope'
        type: object
      groupId:
        description: Group ID
        type: string
      id:
        description: Assignment ID
        type: string
      lastAddedDate:
        description: Date of group membership last added
        format: int64
        type: integer
      lastRemovedDate:
        description: Date of group membership last removed
        format: int64
        type: integer
      user:
        $ref: '#/definitions/UserCompp'
        type: object
      userId:
        description: User ID
        format: int64
        type: integer
      userRoles:
        items:
          type: string
        type: array
    type: object
  UserGroupCreate:
    description: Body for group creation
    properties:
      area:
        description: Group area
        type: string
      description:
        description: Group description
        type: string
      name:
        description: Group name
        type: string
      type:
        description: Group type
        type: string
    required:
    - name
    - type
    type: object
  UserGroupData:
    description: Group object response
    properties:
      active:
        description: Group Status
        type: boolean
      area:
        description: Group area
        type: string
      id:
        description: Group Id
        type: string
      name:
        description: Group name
        type: string
      type:
        description: Group type
        type: string
    type: object
  UserGroupMembershipData:
    description: Body for user group membership response
    properties:
      active:
        type: boolean
      group:
        $ref: '#/definitions/UserGroupData'
        type: object
      groupId:
        type: string
      id:
        type: string
      lastAddedDate:
        format: int64
        type: integer
      lastRemovedDate:
        format: int64
        type: integer
      user:
        $ref: '#/definitions/MembershipData'
        type: object
      userId:
        format: int64
        type: integer
    type: object
  UserGroupMembershipRequest:
    description: Body for user group membership creation
    properties:
      active:
        type: boolean
    type: object
  UserGroupMembershipResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/UserGroupMembershipResponseData'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
        type: object
    type: object
  UserGroupMembershipResponseData:
    description: User object response
    properties:
      active:
        type: boolean
      group:
        $ref: '#/definitions/GroupRoleScope'
        type: object
      groupId:
        type: string
      id:
        type: string
      lastAddedDate:
        format: int64
        type: integer
      lastRemovedDate:
        format: int64
        type: integer
      user:
        $ref: '#/definitions/UserCompp'
        type: object
      userId:
        format: int64
        type: integer
    type: object
  UserGroupMembershipUpdate:
    description: User Group membership update object
    properties:
      active:
        description: Group membership status
        type: boolean
    type: object
  UserGroupResponse:
    description: Group object response
    properties:
      active:
        description: Group status
        type: boolean
      area:
        description: An optional string attribute used for categorizing groups
        type: string
      assigneeCount:
        description: Number of group assignees
        format: int64
        type: integer
      createdDate:
        description: Date of group creation
        format: int64
        type: integer
      description:
        description: Group description
        type: string
      id:
        description: Group ID
        type: string
      memberCount:
        description: Number of group members
        format: int64
        type: integer
      modifiedDate:
        description: Date of group last update
        format: int64
        type: integer
      name:
        description: Group name
        type: string
      type:
        description: Group type
        type: string
    type: object
  UserGroupResponseList:
    properties:
      data:
        items:
          $ref: '#/definitions/UserGroupResponse'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
        type: object
    type: object
  UserGroupUpdate:
    description: Body for group update
    properties:
      active:
        description: Group status
        type: boolean
      area:
        description: Group area
        type: string
      description:
        description: Group description
        type: string
      name:
        description: Group name
        type: string
    type: object
  UserId:
    properties:
      id:
        format: int64
        type: integer
    type: object
  UserIdList:
    items:
      format: int64
      type: integer
    type: array
  UserInfo:
    description: User record.
    properties:
      user:
        $ref: '#/definitions/UserAttributes'
      userSystemInfo:
        $ref: '#/definitions/UserSystemInfo'
    type: object
  UserName:
    properties:
      username:
        type: string
    type: object
  UserNameList:
    items:
      $ref: '#/definitions/UserName'
      type: object
    type: array
  UserSearchFilter:
    properties:
      accountTypes:
        $ref: '#/definitions/StringList'
        description: type of user used to search
      company:
        description: company name
        type: string
      function:
        description: user's function
        type: string
      instrument:
        description: higher level instrument for the Asset Classes
        type: string
      location:
        description: city of the user's job location
        type: string
      marketCoverage:
        description: geographic area the user works with
        type: string
      responsibility:
        description: user's responsibility
        type: string
      title:
        description: user's job title
        type: string
    type: object
  UserSearchQuery:
    properties:
      filters:
        $ref: '#/definitions/UserSearchFilter'
      query:
        description: search / query term.  This can be firstname, lastname, displayname
          or email
        type: string
    type: object
  UserSearchResults:
    properties:
      count:
        description: The total number of users which matched the search criteria.
        format: int64
        type: integer
      limit:
        description: The number of returned results.
        format: int64
        type: integer
      searchQuery:
        $ref: '#/definitions/UserSearchQuery'
      skip:
        description: The number of skipped results.
        format: int64
        type: integer
      users:
        description: A list of users which matched by the search criteria.
        items:
          $ref: '#/definitions/UserV2'
        type: array
    type: object
  UserStatus:
    properties:
      status:
        enum:
        - ENABLED
        - DISABLED
        type: string
      suspended:
        description: An optional attribute indicating whether the user is temporarily
          suspended or not. Since SBE 20.14.
        type: boolean
        x-since: 20.14
      suspendedUntil:
        description: An optional unix timestamp until which the suspension is effective.
          Since SBE 20.14.
        format: int64
        type: integer
        x-since: 20.14
      suspensionReason:
        description: An optional description of the suspension reason. Since SBE 20.14.
        type: string
        x-since: 20.14
    type: object
  UserSuspension:
    properties:
      suspended:
        type: boolean
      suspendedUntil:
        format: int64
        type: integer
      suspensionReason:
        type: string
    type: object
  UserSystemInfo:
    description: User Status Information.
    properties:
      createdBy:
        type: string
      createdDate:
        format: int64
        type: integer
      deactivatedDate:
        format: int64
        type: integer
      id:
        format: int64
        type: integer
      lastLoginDate:
        format: int64
        type: integer
      lastPasswordReset:
        format: int64
        type: integer
      lastUpdatedDate:
        format: int64
        type: integer
      status:
        enum:
        - ENABLED
        - DISABLED
        type: string
      suspended:
        description: An optional attribute indicating whether the user is temporarily
          suspended or not. Since SBE 20.14.
        type: boolean
        x-since: 20.14
      suspendedUntil:
        description: An optional unix timestamp until which the suspension is effective.
          Since SBE 20.14.
        format: int64
        type: integer
        x-since: 20.14
      suspensionReason:
        description: An optional description of the suspension reason. Since SBE 20.14.
        type: string
        x-since: 20.14
    type: object
  UserV2:
    description: User record version 2
    properties:
      accountType:
        enum:
        - NORMAL
        - SYSTEM
        - SDL
        type: string
      avatars:
        $ref: '#/definitions/AvatarList'
      company:
        type: string
      department:
        description: 'Note: only available if the application has the extended user
          or contact permission'
        type: string
      displayName:
        type: string
      division:
        description: 'Note: only available if the application has the extended user
          or contact permission'
        type: string
      emailAddress:
        format: email
        type: string
      firstName:
        type: string
      id:
        format: int64
        type: integer
      jobFunction:
        description: 'Note: only available if the application has the extended user
          or contact permission'
        type: string
      lastName:
        type: string
      location:
        type: string
      mobilePhoneNumber:
        description: 'Note: only available if the application has the extended user
          or contact permission'
        type: string
      roles:
        $ref: '#/definitions/StringList'
      title:
        type: string
      username:
        type: string
      workPhoneNumber:
        description: 'Note: only available if the application has the extended user
          or contact permission'
        type: string
    type: object
  V1IMAttributes:
    properties:
      pinnedMessageId:
        description: UrlSafe message id of the pinned message inside the IM. To perform
          unpin operation, send an empty string.
        type: string
    type: object
  V1IMDetail:
    properties:
      IMSystemInfo:
        $ref: '#/definitions/IMSystemInfo'
      V1IMAttributes:
        $ref: '#/definitions/V1IMAttributes'
    type: object
  V2AdminStreamAttributes:
    description: additional optional properties for the stream
    properties:
      createdByUserId:
        description: creator user id
        format: int64
        type: integer
      createdDate:
        description: created date
        format: int64
        type: integer
      lastMessageDate:
        description: last date a message was sent in this stream
        format: int64
        type: integer
      lastModifiedDate:
        description: last modified date
        format: int64
        type: integer
      members:
        description: list of userid who is member of the stream - im or mim only
        items:
          format: int64
          type: integer
        type: array
      membersCount:
        description: total number of members in the stream
        type: integer
      originCompany:
        description: company name of the creator
        type: string
      originCompanyId:
        description: company id of the creator
        type: integer
      roomDescription:
        description: description of the room (room only)
        type: string
      roomName:
        description: room name (room only)
        type: string
    type: object
  V2AdminStreamFilter:
    description: stream filter criteria
    properties:
      endDate:
        description: End date in unix timestamp in millseconds.  If not specified,
          it assume to be current time.
        format: int64
        type: integer
      origin:
        description: 'Origin of the room. It indicates whether the room was created
          by a user within the company by another company.

          Valid values are INTERNAL or EXTERNAL.

          If not specified, it will include both Internal and External origin

          '
        type: string
      privacy:
        description: 'Privacy setting of the stream.

          Valid values are PUBLIC or PRIVATE.

          If not specified, it will include both public and private streams

          '
        type: string
      scope:
        description: 'Scope of the room. Valid values are INTERNAL or EXTERNAL.

          If not specified, it will include both Internal and External scope

          '
        type: string
      startDate:
        description: Start date in unix timestamp in millseconds
        format: int64
        type: integer
      status:
        description: 'Status of the room.

          Valid values are ACTIVE or INACTIVE.

          If not specified, it will include both Active and Inactive status

          '
        type: string
      streamTypes:
        description: type of streams to search for
        items:
          $ref: '#/definitions/V2AdminStreamType'
          description: Valid values are IM, MIM or ROOM
        type: array
    type: object
  V2AdminStreamInfo:
    description: Stream information
    properties:
      attributes:
        $ref: '#/definitions/V2AdminStreamAttributes'
      crossPod:
        description: If true, this is a cross-pod stream.
        type: boolean
      id:
        description: stream id
        type: string
      isActive:
        description: true indicate that this stream has the status of active and false
          indicate this stream has the scope of inactive
        type: boolean
      isExternal:
        description: true indicate this stream has the scope of external and false
          indictate this stream has the scope of internal. Deprecated, use origin
        type: boolean
      isPublic:
        description: true indicate that this stream has a privacy setting of public.  This
          only apply a ROOM stream type.
        type: boolean
      origin:
        description: INTERNAL if the creator of this stream belongs to the pod, EXTERNAL
          otherwise
        type: string
      type:
        description: type of stream (IM, MIM, ROOM)
        type: string
    type: object
  V2AdminStreamInfoList:
    description: list of stream info
    items:
      $ref: '#/definitions/V2AdminStreamInfo'
    type: array
  V2AdminStreamList:
    description: list of streams info
    properties:
      count:
        description: total number of streams which match the filter criteria
        format: int64
        type: integer
      filter:
        $ref: '#/definitions/V2AdminStreamFilter'
      limit:
        description: maximum number of streams return
        type: integer
      skip:
        description: number of streams skipped
        type: integer
      streams:
        $ref: '#/definitions/V2AdminStreamInfoList'
    type: object
  V2AdminStreamType:
    properties:
      type:
        type: string
    type: object
  V2ConversationSpecificStreamAttributes:
    properties:
      members:
        $ref: '#/definitions/UserIdList'
    type: object
  V2MemberInfo:
    description: Detailed membership record.
    properties:
      addedThroughGroups:
        description: When the user has been added to the stream through a group (aka
          SDL), this array contains the group ID which the user belongs to. Since
          SBE 20.14.
        items:
          format: int64
          type: integer
        type: array
        x-since: 20.14
      isCreator:
        description: true if this is the creator of the room
        type: boolean
      isOwner:
        description: true if this is an owner of the room
        type: boolean
      joinDate:
        description: unix timestamp for join date
        format: int64
        type: integer
      user:
        $ref: '#/definitions/V2MemberUserDetail'
    type: object
  V2MemberInfoList:
    items:
      $ref: '#/definitions/V2MemberInfo'
    type: array
  V2MemberUserDetail:
    description: User detail information for stream membership
    properties:
      company:
        description: Company name
        type: string
      companyId:
        description: Company ID
        type: integer
      displayName:
        description: Display name for the user
        type: string
      email:
        type: string
      firstName:
        type: string
      isExternal:
        description: true indicate that this user belong to another company
        type: boolean
      lastName:
        type: string
      userId:
        format: int64
        type: integer
    type: object
  V2MembershipList:
    description: List of members in the stream.
    properties:
      count:
        description: total members count
        type: integer
      limit:
        description: maximum number of items to return
        type: integer
      members:
        $ref: '#/definitions/V2MemberInfoList'
      skip:
        description: number of items to skip from the request
        type: integer
    type: object
  V2Presence:
    allOf:
    - $ref: '#/definitions/V2UserPresence'
    - properties:
        timestamp:
          description: The time, in milliseconds since Jan 1 1970, when the presence
            state was set.
          format: int64
          type: integer
      type: object
  V2PresenceList:
    items:
      $ref: '#/definitions/V2Presence'
    type: array
  V2PresenceStatus:
    properties:
      category:
        description: "Presence status. Possible values are:\n  - UNDEFINED\n  - AVAILABLE\n\
          \  - BUSY\n  - DO_NOT_DISTURB\n  - ON_THE_PHONE\n  - BE_RIGHT_BACK\n  -\
          \ IN_A_MEETING\n  - AWAY\n  - OUT_OF_OFFICE\n  - OFF_WORK\n  - OFFLINE\n"
        type: string
    required:
    - category
    type: object
  V2RoomSearchCriteria:
    allOf:
    - $ref: '#/definitions/RoomSearchCriteria'
    - properties:
        subType:
          description: 'Restrict the search to the specific room subtype. Valid values
            are: EMAIL'
          type: string
      type: object
    description: Room Query Object. Used to specify the parameters for room search.
  V2RoomSpecificStreamAttributes:
    properties:
      groups:
        description: List of groups (aka SDLs) that were added to the room. Since
          SBE 20.14.
        items:
          $ref: '#/definitions/GroupItem'
        type: array
        x-since: 20.14
      name:
        description: Room name.
        type: string
    type: object
  V2StreamAttributes:
    properties:
      active:
        description: If true, this stream is active.
        type: boolean
      crossPod:
        description: If true, this is a cross-pod stream.
        type: boolean
      id:
        description: The stream ID.
        type: string
      lastMessageDate:
        description: unix timestamp of the last message sent in the stream
        format: int64
        type: integer
      origin:
        description: INTERNAL if the creator of this stream belongs to the pod, EXTERNAL
          otherwise
        type: string
      roomAttributes:
        $ref: '#/definitions/V2RoomSpecificStreamAttributes'
      streamAttributes:
        $ref: '#/definitions/V2ConversationSpecificStreamAttributes'
      streamType:
        $ref: '#/definitions/V2StreamType'
        description: The type of the stream (IM = IM, multi-IM = MIM, chat room =
          ROOM, user wall = POST).
    type: object
  V2StreamType:
    properties:
      type:
        type: string
    type: object
  V2UserAttributes:
    description: V2 User record.
    properties:
      accountType:
        enum:
        - NORMAL
        - SYSTEM
        - SDL
        type: string
      assetClasses:
        items:
          type: string
        type: array
      companyName:
        type: string
      currentKey:
        $ref: '#/definitions/V2UserKeyRequest'
      department:
        type: string
      displayName:
        type: string
      division:
        type: string
      emailAddress:
        type: string
      firstName:
        type: string
      function:
        items:
          type: string
        type: array
      industries:
        items:
          type: string
        type: array
      instrument:
        items:
          type: string
        type: array
      jobFunction:
        type: string
      lastName:
        type: string
      location:
        type: string
      marketCoverage:
        items:
          type: string
        type: array
      mobilePhoneNumber:
        type: string
      previousKey:
        $ref: '#/definitions/V2UserKeyRequest'
      recommendedLanguage:
        type: string
      responsibility:
        items:
          type: string
        type: array
      smsNumber:
        type: string
      title:
        type: string
      twoFactorAuthPhone:
        type: string
      userName:
        type: string
      workPhoneNumber:
        type: string
    type: object
  V2UserCreate:
    description: 'V2 User Creation Object.

      After creation, modify roles, features etc via the specific API calls.

      '
    properties:
      password:
        $ref: '#/definitions/Password'
      roles:
        items:
          type: string
        type: array
      userAttributes:
        $ref: '#/definitions/V2UserAttributes'
    type: object
  V2UserDetail:
    description: V2 Detailed User record.
    properties:
      apps:
        $ref: '#/definitions/IntegerList'
      avatar:
        $ref: '#/definitions/Avatar'
      disclaimers:
        $ref: '#/definitions/IntegerList'
      features:
        $ref: '#/definitions/IntegerList'
      groups:
        $ref: '#/definitions/IntegerList'
      roles:
        $ref: '#/definitions/StringList'
      userAttributes:
        $ref: '#/definitions/V2UserAttributes'
      userSystemInfo:
        $ref: '#/definitions/UserSystemInfo'
    type: object
  V2UserDetailList:
    items:
      $ref: '#/definitions/V2UserDetail'
    type: array
  V2UserKeyRequest:
    description: User RSA key information.
    properties:
      action:
        description: "Action to be performed on the RSA key.\nThe following actions\
          \ can be performed onto the user's active RSA key:\n  - SAVE\n  - REVOKE\n\
          The following actions can be performed onto the user's rotated RSA key:\n\
          \  - REVOKE\n  - EXTEND\n"
        type: string
      expirationDate:
        description: RSA key expiration date. This value is set just for rotated keys.
        format: int64
        type: integer
      key:
        description: User RSA public key.
        type: string
    type: object
  V2UserList:
    description: List of User record version 2
    properties:
      errors:
        description: List of all errors found with the informed search criteria
        items:
          $ref: '#/definitions/UserError'
        type: array
      users:
        description: List of all users found with the search
        items:
          $ref: '#/definitions/UserV2'
        type: array
    type: object
  V2UserPresence:
    allOf:
    - $ref: '#/definitions/V2PresenceStatus'
    - properties:
        userId:
          description: The ID of the user to whom the presence state relates.
          format: int64
          type: integer
      type: object
  V3RoomAttributes:
    properties:
      copyProtected:
        description: If true, clients disable the clipboard copy for content in this
          stream.
        type: boolean
      crossPod:
        description: If true, this room is a cross pod room
        type: boolean
      description:
        description: Room description.
        type: string
      discoverable:
        description: If true, this chatroom (name, description and messages) can be
          searched and listed by non-participants. If false, only participants can
          search this room.
        type: boolean
      keywords:
        description: Keywords for search to use to find this room
        items:
          $ref: '#/definitions/RoomTag'
        type: array
      membersCanInvite:
        description: If true, any chatroom participant can add new participants. If
          false, only owners can add new participants.
        type: boolean
      multiLateralRoom:
        description: If true, this is a multi lateral room where we can find users
          belonging to more than 2 companies.
        type: boolean
      name:
        description: Room name.
        type: string
      pinnedMessageId:
        description: UrlSafe message id of the pinned message inside the room. To
          perform unpin operation, send an empty string.
        type: string
      public:
        description: If true, this is a public chatroom. IF false, a private chatroom.
        type: boolean
      readOnly:
        description: If true, only stream owners can send messages.
        type: boolean
      scheduledMeeting:
        description: If true, this room is for a scheduled meeting.
        type: boolean
      subType:
        description: This field is ignored when creating a new room as it was only
          used for email integration which is now sunset.
        type: string
      viewHistory:
        description: If true, new members can view the room chat history of the room.
        type: boolean
    type: object
  V3RoomDetail:
    properties:
      groups:
        description: List of groups (aka SDLs) that were added to the room.
        items:
          $ref: '#/definitions/GroupItem'
        type: array
      roomAttributes:
        $ref: '#/definitions/V3RoomAttributes'
      roomSystemInfo:
        $ref: '#/definitions/RoomSystemInfo'
    type: object
  V3RoomSearchResults:
    description: A list of search results and counts per search parameter.
    properties:
      count:
        description: The total number of rooms matched by the search.
        format: int64
        type: integer
      facetedMatchCount:
        description: Detailed counts of matched rooms per search criterion.
        items:
          $ref: '#/definitions/FacetedMatchCount'
        type: array
      limit:
        description: The number of returned results.
        type: integer
      query:
        $ref: '#/definitions/V2RoomSearchCriteria'
      rooms:
        description: A list of rooms matched by the query.
        items:
          $ref: '#/definitions/V3RoomDetail'
        type: array
      skip:
        description: The number of skipped results.
        type: integer
info:
  description: 'This document refers to Symphony API calls that do not need

    encryption or decryption of content.


    - sessionToken can be obtained by calling the

    authenticationAPI on the symphony back end and the key manager

    respectively. Refer to the methods described in authenticatorAPI.yaml.

    - Actions are defined to be atomic, ie will succeed in their entirety

    or fail and have changed nothing.

    - If it returns a 40X status then it will have made no change to the

    system even if ome subset of the request would have succeeded.

    - If this contract cannot be met for any reason then this is an error

    and the response code will be 50X.

    '
  title: Pod API
  version: 20.14.1
paths:
  /file_ext/v1/allowed_extensions:
    get:
      consumes:
      - application/json
      description: 'Provides a RESTful API to iterate all file extensions configured
        by the tenant admin

        that are allowed for the upload.  Pagination of this list is managed through
        a

        combination of the optional request parameters and service-side managed maximums.


        Pagination of the results is provided through the before or after input paramters

        and presented through the opaque cursor values provided as output from a previous

        response.  Only one of before or after or neither may be provided.


        DO NOT store cursors. Cursors can quickly become invalid if items are added
        or deleted.

        Use them only during a short-period of time that you are traversing the list.

        '
      operationId: listAllowedFileExtensions
      parameters:
      - description: 'This is the maximum number of objects that may be returned.
          A query may return

          fewer than the value of limit due to filtering or service-side maximums.
          Do not

          depend on the number of results being fewer than the limit value to indicate
          your

          query reached the end of the list of data, use the absence of next instead
          as

          described below. For example, if you set limit to 10 and 9 results are returned,

          there may be more data available, but one item was removed due to privacy
          filtering.

          Some maximums for limit may be enforced for performance reasons. In all
          cases, the

          API returns the correct pagination links.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Returns results from an opaque "before" cursor value as presented
          via a response cursor

          '
        in: query
        name: before
        required: false
        type: string
      - description: 'Returns results from an opaque "after" cursor value as presented
          via a response cursor

          '
        in: query
        name: after
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: 'Requested sequence of file extensions object records with
            the page size

            limited by the optional limit paramter or the service-specific maximum

            limit offered.

            '
          schema:
            $ref: '#/definitions/FileExtensionsResponse'
        '400':
          description: 'Invalid arguments were passed by the client

            '
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Authentication was not provided

            '
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Authorization is not provided to this request

            '
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: 'Unexpected service error - a retry may work

            '
          schema:
            $ref: '#/definitions/Error'
        '503':
          description: 'Temporarily unable to handle request - could be due to service
            overload or maintenance

            '
        '504':
          description: 'Timeout waiting on response at gateway

            '
      summary: Allows iteration of all file extensions supported for upload
  /file_ext/v1/allowed_extensions/{extension}:
    delete:
      consumes:
      - application/json
      description: 'Provides a method to delete a specific file extension configured
        for upload

        support via an admin. The file extension identifying the resource is treated

        case-insensitively by the API.

        '
      operationId: deleteAllowedFileExtension
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: path
        name: extension
        required: true
        type: string
      produces:
      - application/json
      responses:
        204:
          description: 204 response
        400:
          description: 'Invalid arguments were passed by the client

            '
          schema:
            $ref: '#/definitions/Error'
        403:
          description: 'Authorization is not provided to this request

            '
          schema:
            $ref: '#/definitions/Error'
        500:
          description: 'Unexpected service error - a retry may work

            '
          schema:
            $ref: '#/definitions/Error'
      summary: Allows deletion of a specific file extension supported for upload
    put:
      consumes:
      - application/json
      description: 'Provides a method to create or replace a specific file extension
        configured for upload

        support via an admin. The API treats the file extension in the path case-insensitively

        by converting it to lowecase.

        '
      operationId: putAllowedFileExtension
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: path
        name: extension
        required: true
        type: string
      - in: body
        name: V3FileExtension
        required: true
        schema:
          $ref: '#/definitions/FileExtension'
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: '#/definitions/FileExtension'
        400:
          description: 'Invalid arguments were passed by the client: the file extension
            object specified

            the source as ''system'' yet the file extension is not known to the system
            (API cannot

            create system file extensions, only customer-defined file extensions),
            the extension

            in the path doesn''t match the extension in the body, the length of the
            file extension

            exceeded the maximum length (64 characters)

            '
          schema:
            $ref: '#/definitions/Error'
        403:
          description: 'Authorization is not provided to this request

            '
          schema:
            $ref: '#/definitions/Error'
        500:
          description: 'Unexpected service error - a retry may work

            '
          schema:
            $ref: '#/definitions/Error'
      summary: Allows replacement or creation of a specific file extension supported
        for upload
  /v1/admin/app/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Application detail to create the app with
        in: body
        name: applicationDetail
        required: true
        schema:
          $ref: '#/definitions/ApplicationDetail'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ApplicationDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Creates a new app
      tags:
      - Application
  /v1/admin/app/entitlement/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PodAppEntitlementList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the list of application entitlements for the company
      tags:
      - AppEntitlement
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/PodAppEntitlementList'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PodAppEntitlementList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update the application entitlements for the company
      tags:
      - AppEntitlement
  /v1/admin/app/{id}/delete:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: The id of the app
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Deletes a app
      tags:
      - Application
  /v1/admin/app/{id}/get:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: the id of the app to get
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ApplicationDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Gets a app
      tags:
      - Application
  /v1/admin/app/{id}/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Id of the app
        in: path
        name: id
        required: true
        type: string
      - description: Details to update the app with
        in: body
        name: applicationDetail
        required: true
        schema:
          $ref: '#/definitions/ApplicationDetail'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/ApplicationDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Updates a app
      tags:
      - Application
  /v1/admin/disclaimer/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/DisclaimerList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: List all disclaimers for the company (pod)
      tags:
      - Disclaimer
  /v1/admin/disclaimer/{did}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: The ID of the entity
        in: path
        name: did
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Disclaimer'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get a disclaimer by disclaimer id
      tags:
      - Disclaimer
  /v1/admin/disclaimer/{did}/users:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: The ID of the entity
        in: path
        name: did
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserIdList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: List all users assigned to this disclaimer
      tags:
      - Disclaimer
  /v1/admin/group/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/GroupList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get a list of all Information Barrier Groups
      tags:
      - InfoBarriers
  /v1/admin/group/{gid}/membership/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: URL-Safe encoded Group ID
        in: path
        name: gid
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/IntegerList'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BulkActionResult'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Add members to an Information Barrier group.
      tags:
      - InfoBarriers
  /v1/admin/group/{gid}/membership/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: URL-Safe encoded Group ID
        in: path
        name: gid
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Number of records to skip. Must be a positive integer.
        in: query
        name: skip
        required: false
        type: integer
        x-since: 20.15
      - description: Max number of records to return. Default is 10000. Must be a
          positive integer and must not exceed 10000.
        in: query
        name: limit
        required: false
        type: integer
        x-since: 20.15
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/IntegerList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Group cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the list of userids in this Information Barrier Group
      tags:
      - InfoBarriers
  /v1/admin/group/{gid}/membership/remove:
    post:
      consumes:
      - application/json
      parameters:
      - description: URL-Safe encoded Group ID
        in: path
        name: gid
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: users
        required: true
        schema:
          $ref: '#/definitions/IntegerList'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/BulkActionResult'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Remove members from an Information Barrier group
      tags:
      - InfoBarriers
  /v1/admin/im/create:
    post:
      consumes:
      - application/json
      description: 'At least two user IDs must be provided or

        an error response will be sent.


        The caller is not included in the members of the

        created chat.


        Duplicate users will be included in the membership of the chat but

        the duplication will be silently ignored.


        If there is an existing IM conversation with the same set of participants
        then

        the id of that existing stream will be returned.

        '
      parameters:
      - description: List of (integer) User IDs of participants
        in: body
        name: uidList
        required: true
        schema:
          $ref: '#/definitions/UserIdList'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Stream'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Create a new single or multi party instant message conversation
      tags:
      - Streams
  /v1/admin/messages:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token
        in: header
        name: sessionToken
        required: true
        type: string
      - description: the ids of the messages to be fetched
        in: body
        name: messageIds
        required: true
        schema:
          $ref: '#/definitions/MessageIds'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MessageDetails'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not found: Message ID could not be found.'
          schema:
            $ref: '#/definitions/Error'
        '422':
          description: 'Unprocessable entity: Invalid message type.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Fetch message details
  /v1/admin/messages/{messageId}/metadata/relationships:
    get:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Request user agent.
        in: header
        name: User-Agent
        required: true
        type: string
      - description: Valid id of a SOCIALMESSAGE
        in: path
        name: messageId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Successful Operation
          schema:
            $ref: '#/definitions/MessageMetadataResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the message metadata relationship
  /v1/admin/messages/{messageId}/receipts:
    get:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: The message ID
        in: path
        name: messageId
        required: true
        type: string
      - description: "Returns results from an opaque \u201Cbefore\u201D cursor value\
          \ as presented via a response cursor."
        in: query
        name: before
        required: false
        type: string
      - description: "Returns results from an opaque \u201Cafter\u201D cursor value\
          \ as presented via a response cursor."
        in: query
        name: after
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MessageReceiptDetailResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Message receipt details cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Fetch receipts details from a specific message.
  /v1/admin/messagesuppression/{id}/suppress:
    post:
      consumes:
      - application/json
      parameters:
      - description: URL-Safe encoded Message ID
        in: path
        name: id
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/MessageSuppressionResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Suppress a message
      tags:
      - MessageSuppression
  /v1/admin/policy/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/PolicyList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get all Information Policies
      tags:
      - InfoBarriers
  /v1/admin/room/{id}/membership/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserId'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Add a member to an existing room.
      tags:
      - Room Membership
  /v1/admin/room/{id}/membership/list:
    get:
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: If true, the membership list will include past members of the
          stream. If false, the listing will only incude current members. Default
          false.
        in: query
        name: includePastMembers
        required: false
        type: boolean
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MembershipList'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Lists current and previous members of an existing room.
      tags:
      - Room Membership
  /v1/admin/room/{id}/membership/remove:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserId'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Remove a member from a room.
      tags:
      - Room Membership
  /v1/admin/room/{id}/setActive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - in: query
        name: active
        required: true
        type: boolean
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoomDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Deactivate or reactivate a chatroom via AC Portal.
      tags:
      - Streams
  /v1/admin/stream/{id}/membership/list:
    get:
      parameters:
      - description: stream Id
        in: path
        name: id
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Number of items to skip. Default is 0.
        in: query
        name: skip
        required: false
        type: integer
      - description: Maximum number of items to return. Default is 100 and not to
          exceed 1000.
        in: query
        name: limit
        required: false
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2MembershipList'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: List the current members of an existing stream.  The stream can be
        of type IM, MIM, or ROOM
      tags:
      - Streams
  /v1/admin/system/features/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: The list of valid feature entitlement names.
          schema:
            $ref: '#/definitions/StringList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the full set of Symphony features available for this pod
      tags:
      - System
  /v1/admin/system/protocols:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: the protocol to add
        in: body
        name: protocol
        required: true
        schema:
          $ref: '#/definitions/Protocol'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Protocol'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Add an entry to URI protocols supported by the company (pod)
      tags:
      - System
  /v1/admin/system/protocols/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StringList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get a list of all URI protocols supported by the company (pod)
      tags:
      - System
  /v1/admin/system/protocols/{scheme}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: the scheme to remove from the protocols list
        in: path
        name: scheme
        required: true
        type: string
      produces:
      - application/json
      responses:
        '204':
          description: 204 response
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Remove an entry from URI protocols supported by the company (pod)
      tags:
      - System
  /v1/admin/system/roles/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/RoleDetailList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get a list of all roles available in the company (pod)
      tags:
      - User
  /v1/admin/user/find:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Number of users to skip. Default is 0. Must be a integer equals
          or bigger than 0.
        in: query
        name: skip
        required: false
        type: integer
      - description: Maximum number of users to return. Default is 100. Must be a
          positive integer and must not exceed 1000.
        in: query
        name: limit
        required: false
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserFilter'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserDetailList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Find a user based on attributes
      tags:
      - User
  /v1/admin/user/{uid}/app/entitlement/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: User ID as a decimal integer
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserAppEntitlementList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the list of application entitlements for this user
      tags:
      - AppEntitlement
    patch:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: User ID as a decimal integer
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserAppEntitlementsPatchList'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserAppEntitlementList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update unique entitlement of an app for this user. Entitlement can
        be installation, visibility or product
      tags:
      - AppEntitlement
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: User ID as a decimal integer
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserAppEntitlementList'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserAppEntitlementList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update the application entitlements for this user
      tags:
      - AppEntitlement
  /v1/admin/user/{uid}/avatar:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/AvatarList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the URL of the avatar of a particular user
      tags:
      - User
  /v1/admin/user/{uid}/avatar/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/AvatarUpdate'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update the avatar of a particular user
      tags:
      - User
  /v1/admin/user/{uid}/delegates:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: The userid's of the delegates of this user.
          schema:
            $ref: '#/definitions/IntegerList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the delegates assigned to a user
      tags:
      - User
  /v1/admin/user/{uid}/delegates/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/DelegateAction'
      produces:
      - application/json
      responses:
        '200':
          description: Sucesss.
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update the delegates assigned to a user
      tags:
      - User
  /v1/admin/user/{uid}/disclaimer:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Unassign a disclaimer from a user
      tags:
      - User
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/Disclaimer'
        '204':
          description: No content. User doesn't have an assigned disclaimer
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the disclaimer assigned to a user
      tags:
      - User
  /v1/admin/user/{uid}/disclaimer/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/StringId'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Assign a disclaimer to a user
      tags:
      - User
  /v1/admin/user/{uid}/features:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FeatureList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the list of Symphony feature entitlements enabled for a particular
        user
      tags:
      - User
  /v1/admin/user/{uid}/features/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/FeatureList'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update the list of Symphony feature entitlements for a particular user
      tags:
      - User
  /v1/admin/user/{uid}/roles/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/StringId'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Add a role to a user
      tags:
      - User
  /v1/admin/user/{uid}/roles/remove:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/StringId'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: User cannot be found'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Remove a role from a user
      tags:
      - User
  /v1/admin/user/{uid}/status:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserStatus'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the status, active or inactive, for a particular user
      tags:
      - User
  /v1/admin/user/{uid}/status/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserStatus'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update the status of a particular user
      tags:
      - User
  /v1/admin/user/{userId}/suspension/update:
    put:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token
        in: header
        name: sessionToken
        required: true
        type: string
      - description: User ID as a decimal integer
        format: int64
        in: path
        name: userId
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserSuspension'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update the status of suspension of a particular user
      tags:
      - User
  /v1/companycert/delete:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: fingerPrint
        required: true
        schema:
          $ref: '#/definitions/StringId'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a company certificate
      tags:
      - Security
  /v1/companycert/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Pagination start
        in: query
        name: skip
        required: false
        type: integer
      - description: Row limit
        in: query
        name: limit
        required: false
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertInfoList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: List all trusted certs
      tags:
      - Security
  /v1/companycert/podmanaged/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Pagination start
        in: query
        name: skip
        required: false
        type: integer
      - description: Row limit
        in: query
        name: limit
        required: false
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertInfoList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: List all trusted certs
      tags:
      - Security
  /v1/companycert/type/list:
    post:
      consumes:
      - application/json
      parameters:
      - description: Certificate type list
        in: body
        name: typeIdList
        required: true
        schema:
          $ref: '#/definitions/CompanyCertTypeList'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Pagination start
        in: query
        name: skip
        required: false
        type: integer
      - description: Row limit
        in: query
        name: limit
        required: false
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertInfoList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: List all certs of the given types
      tags:
      - Security
  /v1/companycert/{fingerPrint}/get:
    get:
      consumes:
      - application/json
      parameters:
      - description: Certificate fingerPrint (ID)
        in: path
        name: fingerPrint
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertDetail'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the details of a company certificate
      tags:
      - Security
  /v1/companycert/{fingerPrint}/issuedBy:
    get:
      consumes:
      - application/json
      parameters:
      - description: Certificate fingerPrint (ID)
        in: path
        name: fingerPrint
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertInfoList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: 'Return a list of all certificates which were verified to the cert
        whose

        fingerprint is passed.

        '
      tags:
      - Security
  /v1/companycert/{fingerPrint}/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Certificate fingerPrint (ID)
        in: path
        name: fingerPrint
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: certAttributes
        required: true
        schema:
          $ref: '#/definitions/CompanyCertAttributes'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update a company certificate
      tags:
      - Security
  /v1/connection/accept:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: connectionRequest
        required: true
        schema:
          $ref: '#/definitions/UserConnectionRequest'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserConnection'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Connection cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Accept the connection request for the requesting user
      tags:
      - Connection
  /v1/connection/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: connectionRequest
        required: true
        schema:
          $ref: '#/definitions/UserConnectionRequest'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserConnection'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: User cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Sends an invitation to connect with another user
      tags:
      - Connection
  /v1/connection/list:
    get:
      description: 'This retrieves all connections of the requesting user. (i.e. both
        connections in which the requesting user is the sender and those

        in which the requesting user is the inivtee) By default, if you haven''t specified
        the connection status to filter on, this call will only

        return results for both "pending_incoming" and "pending_outgoing". You can
        optionally filter by userIds to further restrict the results of

        a specific connection status. If the users are in the same private pod, the
        users have an implicit connection status of "accepted". Those

        users will not be returned in the response if you don''t specify the connection
        status as "accepted" (default is "pending")

        and the explicit userIds in the request.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'Filter the connection list based on the connection status.

          The connection status can only be pending_incoming, pending_outgoing, accepted,
          rejected, or all (all of the above)

          '
        enum:
        - PENDING_INCOMING
        - PENDING_OUTGOING
        - ACCEPTED
        - REJECTED
        - ALL
        in: query
        name: status
        type: string
      - description: 'The userIds parameter should be specified as a comma delimited
          list of user ids and can be used to restrict the results of a specific connection.

          Note that this is particularly important if the caller intends to retrieve
          results for implicit connection (user within the same pod).

          Implicit connections will not be included in the response if userId is not
          provided.

          '
        in: query
        name: userIds
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserConnectionList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Connection cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: List of requesting user's connection
      tags:
      - Connection
  /v1/connection/reject:
    post:
      consumes:
      - application/json
      description: 'Reject the connection between the requesting user and request
        sender. If both users are in the same private pod,

        an error will be returned because both users have an implicit connection which
        cannot be rejected.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: connectionRequest
        required: true
        schema:
          $ref: '#/definitions/UserConnectionRequest'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/UserConnection'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Connection cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Reject the connection request for the requesting user.
      tags:
      - Connection
  /v1/connection/user/{uid}/remove:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Connection cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Removes a connection with a user.
      tags:
      - Connection
  /v1/connection/user/{userId}/info:
    get:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: user Id
        in: path
        name: userId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserConnection'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: Connection cannot be found.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: The status of the connection invitation to another user.
      tags:
      - Connection
  /v1/files/allowedTypes:
    get:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StringList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get supported attachment types for the pod
      tags:
      - Pod
  /v1/im/create:
    post:
      consumes:
      - application/json
      description: 'At least one user ID must be provided or

        an error response will be sent.


        The caller is implicitly included in the members of the

        created chat.


        Duplicate users will be included in the membership of the chat but

        the duplication will be silently ignored.


        If there is an existing IM conversation with the same set of participants
        then

        the id of that existing stream will be returned.


        This method was incorrectly specified to take a query parameter in

        version 1.0 of this specification but now expects a JSON array of

        user IDs in the body of the request.

        '
      parameters:
      - description: List of (integer) User IDs of participants
        in: body
        name: uidList
        required: true
        schema:
          $ref: '#/definitions/UserIdList'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Stream'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Create a new single or multi party instant message conversation between
        the caller and specified users.
      tags:
      - Streams
  /v1/im/{id}/info:
    get:
      parameters:
      - description: IM streamId
        in: path
        name: id
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V1IMDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get information about a partcular IM.
      tags:
      - Streams
  /v1/im/{id}/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: IM streamID
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/V1IMAttributes'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V1IMDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '451':
          description: 'Unavailable for Legal Reasons: Compliance Issues found in
            IM update request.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update the attributes of an existing IM.
      tags:
      - Streams
  /v1/languages:
    get:
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/Languages'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Lists available languages for the pod.
      tags:
      - Pod
  /v1/message/{mid}/status:
    get:
      parameters:
      - description: Message ID
        in: path
        name: mid
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MessageStatus'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not found: The informed Message ID does not exist'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get the read status of a particular message.
      tags:
      - Message
  /v1/podcert:
    get:
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PodCertificate'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: 'Retrieve the pod certificate that can be use to validate signed JWT
        tokens generated from the pod

        '
      tags:
      - Pod
  /v1/presence/feed/create:
    post:
      consumes:
      - application/json
      description: 'Create a new stream capturing presence status changes ("presence
        feed").

        When read from, the feed will return the current presence status of company
        (pod) users

        if it has changed since the last read.


        Returns the ID of the presence feed to be used in subsequent read operations.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StringId'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Create Presence status feed.
      tags:
      - Presence
  /v1/presence/feed/{feedId}/delete:
    post:
      consumes:
      - application/json
      description: 'Returns the ID of the deleted feed.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Presence feed ID.
        in: path
        name: feedId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StringId'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a presence status feed.
      tags:
      - Presence
  /v1/presence/feed/{feedId}/read:
    get:
      description: 'Returns the current presence status of company (pod) users

        if it has changed since the last read. Returns up to 500 records at a time.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Presence feed ID.
        in: path
        name: feedId
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2PresenceList'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Read a presence status feed.
      tags:
      - Presence
  /v1/room/{id}/membership/add:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserId'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Adds new member to an existing room.
      tags:
      - Room Membership
  /v1/room/{id}/membership/demoteOwner:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserId'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Demotes room owner.
      tags:
      - Room Membership
  /v1/room/{id}/membership/promoteOwner:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserId'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Promotes user to owner.
      tags:
      - Room Membership
  /v1/room/{id}/membership/remove:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/UserId'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Removes member from an existing room.
      tags:
      - Room Membership
  /v1/room/{id}/setActive:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - in: query
        name: active
        required: true
        type: boolean
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/RoomDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Deactivate or reactivate a chatroom. At creation, a new chatroom is
        active.
      tags:
      - Streams
  /v1/streams/list:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'No. of results to skip.

          '
        in: query
        name: skip
        type: integer
      - description: 'Max no. of results to return. If no value is provided, 50 is
          the default.

          '
        in: query
        name: limit
        type: integer
      - description: Stream filtering criteria.
        in: body
        name: filter
        schema:
          $ref: '#/definitions/StreamFilter'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StreamList'
        '204':
          description: Stream not found.
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: 'Retrieve a list of all streams of which the requesting user is a member,

        sorted by creation date (ascending).

        '
      tags:
      - Streams
  /v1/streams/{sid}/attachments:
    get:
      parameters:
      - description: Stream Id
        in: path
        name: sid
        required: true
        type: string
      - description: 'Timestamp of first required attachment.

          This is a long integer value representing milliseconds since Jan 1 1970

          '
        format: int64
        in: query
        name: since
        required: false
        type: integer
      - description: 'Timestamp of last required attachment.

          This is a long integer value representing milliseconds since Jan 1 1970

          '
        format: int64
        in: query
        name: to
        required: false
        type: integer
      - description: Maximum number of attachments to return. Default is 50. Must
          be a positive integer and must not exceed 100.
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Attachment date sort direction : ASC or DESC (default to ASC)

          '
        in: query
        name: sortDir
        required: false
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/StreamAttachmentResponse'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get attachments in a particular stream.
      tags:
      - Streams
  /v1/user/presence/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: List of (integer) User IDs of users whose presence to query
        in: body
        name: uidList
        required: true
        schema:
          $ref: '#/definitions/UserIdList'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: user id cannot be located.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Register interest in a user's presence status
      tags:
      - Presence
  /v1/user/search:
    post:
      consumes:
      - application/json
      parameters:
      - description: number of records to skip
        in: query
        name: skip
        type: integer
      - description: Max number of records to return. If no value is provided, 50
          is the default.
        in: query
        name: limit
        type: integer
      - description: 'If true then a local DB search will be performed and only local
          pod users will be

          returned. If absent or false then a directory search will be performed and
          users

          from other pods who are visible to the calling user will also be returned.

          '
        in: query
        name: local
        required: false
        type: boolean
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: search criteria
        in: body
        name: searchRequest
        required: true
        schema:
          $ref: '#/definitions/UserSearchQuery'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserSearchResults'
        '204':
          description: No user found.
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Search for users by name or email address
      tags:
      - Users
  /v1/user/{uid}/follow:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: User ID as a decimal integer of the user to be followed
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - description: List of (integer) User IDs of the followers
        in: body
        name: uidList
        required: true
        schema:
          $ref: '#/definitions/FollowersList'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Make a list of users start following a specific user
      tags:
      - User
  /v1/user/{uid}/followers:
    get:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: User ID as a decimal integer of the user we want to get the followers
          list
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - description: This is the maximum number of objects that may be returned.
        in: query
        name: limit
        required: false
        type: integer
      - description: "Returns results from an opaque \u201Cbefore\u201D cursor value\
          \ as presented via a response cursor."
        in: query
        name: before
        required: false
        type: string
      - description: "Returns results from an opaque \u201Cafter\u201D cursor value\
          \ as presented via a response cursor."
        in: query
        name: after
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FollowersListResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Returns the list of followers for a specific user
      tags:
      - User
  /v1/user/{uid}/following:
    get:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: User ID as a decimal integer of the user we want to get the following
          list
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - description: This is the maximum number of objects that may be returned.
        in: query
        name: limit
        required: false
        type: integer
      - description: "Returns results from an opaque \u201Cbefore\u201D cursor value\
          \ as presented via a response cursor."
        in: query
        name: before
        required: false
        type: string
      - description: "Returns results from an opaque \u201Cafter\u201D cursor value\
          \ as presented via a response cursor."
        in: query
        name: after
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/FollowingListResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Returns the list of users that a specific user is following
      tags:
      - User
  /v1/user/{uid}/unfollow:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: User ID as a decimal integer of the user to be unfollowed
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - description: List of (integer) User IDs of the followers
        in: body
        name: uidList
        required: true
        schema:
          $ref: '#/definitions/FollowersList'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Make a list of users unfollowing a specific user
      tags:
      - User
  /v2/admin/streams/list:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'Number of items to skip. Default is 0.

          '
        in: query
        name: skip
        type: integer
      - description: 'Maximum number of items to return. Default is 50.  This value
          cannot exceed 100.

          '
        in: query
        name: limit
        type: integer
      - description: Stream filtering criteria.
        in: body
        name: filter
        schema:
          $ref: '#/definitions/V2AdminStreamFilter'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2AdminStreamList'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: 'Retrieve all the streams across the enterprise where the membership
        of the stream has been modified between a given time range

        '
      tags:
      - Streams
  /v2/admin/user/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/V2UserCreate'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V2UserDetail'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Create a new V2 User
      tags:
      - User
  /v2/admin/user/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session Authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Number of users to skip. Default is 0. Must be a integer equals
          or bigger than 0.
        in: query
        name: skip
        required: false
        type: integer
      - description: Maximum number of users to return. Default is 100. Must be a
          positive integer and must not exceed 1000.
        in: query
        name: limit
        required: false
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V2UserDetailList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Retrieve a list of all users in the company (pod)
      tags:
      - User
  /v2/admin/user/{uid}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V2UserDetail'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Retreive V2 User details for a particular user
      tags:
      - User
  /v2/admin/user/{uid}/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/V2UserAttributes'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V2UserDetail'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update an existing V2 User
      tags:
      - User
  /v2/companycert/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - in: body
        name: cert
        required: true
        schema:
          $ref: '#/definitions/CompanyCert'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/CompanyCertDetail'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Create a company trusted or untrusted certificate. Different from V1
        in that we reject expired certificates.
      tags:
      - Security
  /v2/room/{id}/membership/list:
    get:
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/MembershipList'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Lists current members of an existing room.
      tags:
      - Room Membership
  /v2/sessioninfo:
    get:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserV2'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get information about the current user's session.
      tags:
      - Session
  /v2/streams/{sid}/info:
    get:
      parameters:
      - description: Stream Id
        in: path
        name: sid
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2StreamAttributes'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get information about a partcular stream.
      tags:
      - Streams
  /v2/system/protocols:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Number of items to skip. Default is 0.
        in: query
        name: skip
        required: false
        type: integer
      - description: Maximum number of items to return. Default is 100 and not to
          exceed 1000.
        in: query
        name: limit
        required: false
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/StringList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get a list of URI protocols supported by the company (pod)
      tags:
      - System
  /v2/user:
    get:
      parameters:
      - description: User ID as a decimal integer
        format: int64
        in: query
        name: uid
        required: false
        type: integer
      - description: Email address
        format: email
        in: query
        name: email
        required: false
        type: string
      - description: login user name
        in: query
        name: username
        required: false
        type: string
      - description: 'If true then a local DB search will be performed and only local
          pod users will be

          returned. If absent or false then a directory search will be performed and
          users

          from other pods who are visible to the calling user will also be returned.

          Note: for username search, the local flag must be true

          '
        in: query
        name: local
        required: false
        type: boolean
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/UserV2'
        '204':
          description: No user found.
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get user information
      tags:
      - Users
  /v2/user/presence:
    get:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2Presence'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Invalid session token'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get presence information about the requesting user.
      tags:
      - Presence
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'If true, the user''s current status is taken into consideration.
          If the user is currently OFFLINE,

          the user''s presence will still be OFFLINE, but the new presence will take
          effect when the

          user comes online. If the user is currently online, the user''s activity
          state will be

          applied to the presence if applicable. (e.g. if you are setting their presence
          to AVAILABLE,

          but the user is currently idle, their status will be represented as AWAY)

          '
        in: query
        name: soft
        required: false
        type: boolean
      - in: body
        name: presence
        required: true
        schema:
          $ref: '#/definitions/V2PresenceStatus'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2Presence'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Invalid session token.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Set the presence of the requesting user.
      tags:
      - Presence
  /v2/users/presence:
    get:
      description: 'The returned data is taken from the in-memory cache for performance

        reasons which means inactive users may be omitted from the response.


        All non-inactive users WILL be returned and some inactive users MAY

        be included. Any omitted user IS inactive.


        Returned records are sorted by user ID, ascending.


        This method is expensive. It pulls ALL records from the cache, sorts them
        and then only uses a subset.

        For large numbers of users, this can be very inefficient both due to sorting

        and due to the cache being distributed across many nodes.


        Addiionally, there is the potential to miss users if they become active

        after the page in which their user ID falls has already been read by the client.

        To avoid this situation, a presence feed should be created (and optionally
        read from)

        first to capture presence changes of users who get reactivated during a paged
        call to this endpoint.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Last user ID retrieved. Used for paging; if provided, results
          will skip users with IDs less than this parameter.
        format: int64
        in: query
        name: lastUserId
        required: false
        type: integer
      - description: Max number of records to return. If no value is provided, 1000
          is the default. The maximum supported value is 5000.
        in: query
        name: limit
        required: false
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2PresenceList'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get presence information about all company (pod) users.
      tags:
      - Presence
  /v3/room/create:
    post:
      consumes:
      - application/json
      description: 'Create a new chatroom.


        If no  attributes are specified, the room is created as a private chatroom.

        '
      parameters:
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/V3RoomAttributes'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V3RoomDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '451':
          description: 'Unavailable for Legal Reasons: Compliance Issues found in
            room creation request.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Create a new chatroom.
      tags:
      - Streams
  /v3/room/search:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'No. of results to skip.

          '
        in: query
        name: skip
        type: integer
      - description: 'Max no. of results to return. If no value is provided, 50 is
          the default. Must be a positive

          integer and must not exceed 100

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: The search query object.
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/V2RoomSearchCriteria'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V3RoomSearchResults'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Search rooms according to the specified criteria.
      tags:
      - Streams
  /v3/room/{id}/info:
    get:
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V3RoomDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get information about a partcular chatroom.
      tags:
      - Streams
  /v3/room/{id}/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Room streamId
        in: path
        name: id
        required: true
        type: string
      - in: body
        name: payload
        required: true
        schema:
          $ref: '#/definitions/V3RoomAttributes'
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V3RoomDetail'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '451':
          description: 'Unavailable for Legal Reasons: Compliance Issues found in
            room update request.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Update the attributes of an existing chatroom.
      tags:
      - Streams
  /v3/user/presence:
    post:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'If true, the user''s current status is taken into consideration.
          If the user is currently OFFLINE,

          the user''s presence will still be OFFLINE, but the new presence will take
          effect when the

          user comes online. If the user is currently online, the user''s activity
          state will be

          applied to the presence if applicable. (e.g. if you are setting their presence
          to AVAILABLE,

          but the user is currently idle, their status will be represented as AWAY)

          '
        in: query
        name: soft
        required: false
        type: boolean
      - in: body
        name: presence
        required: true
        schema:
          $ref: '#/definitions/V2UserPresence'
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2Presence'
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Unauthorized.
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden.
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: user id cannot be located.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Set presence information for a particular user.
      tags:
      - Presence
  /v3/user/{uid}/presence:
    get:
      parameters:
      - description: 'User ID as a decimal integer

          '
        format: int64
        in: path
        name: uid
        required: true
        type: integer
      - default: false
        description: 'If true, a local query will be performed and the presence will
          be

          set to OFFLINE for users who are not local to the calling user''s

          pod. If false or absent, then the presence of all local users and

          the presence of all external users to whom the calling user is

          connected will be queried.


          For external users, a "presence interest" should be registered through

          /v1/user/presence/register before querying for presence.

          '
        in: query
        name: local
        required: false
        type: boolean
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2Presence'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: 'Not Found: user id cannot be located.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get presence information about a particular user.
      tags:
      - Presence
  /v3/users:
    get:
      parameters:
      - description: User IDs as a list of decimal integers separated by comma
        in: query
        name: uid
        required: false
        type: string
      - description: List of email addresses separated by comma
        in: query
        name: email
        required: false
        type: string
      - description: List of username separated by comma
        in: query
        name: username
        required: false
        type: string
      - description: 'If true then a local DB search will be performed and only local
          pod users will be

          returned. If absent or false then a directory search will be performed and
          users

          from other pods who are visible to the calling user will also be returned.

          '
        in: query
        name: local
        required: false
        type: boolean
      - description: 'If not set all user status will be returned,

          if true all active users will be returned,

          if false all inactive users will be returned

          '
        in: query
        name: active
        required: false
        type: boolean
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V2UserList'
        '204':
          description: No user found.
        '400':
          description: Client error.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: 'Search users by emails or ids.

        Only one of the search lists should be informed at a time.

        Search lists may containt up to 100 elements.

        '
      tags:
      - Users
swagger: '2.0'
