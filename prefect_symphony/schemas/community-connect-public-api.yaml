components:
  schemas:
    ApiError:
      properties:
        code:
          description: error code
          type: string
        details:
          description: Full details about error, usefull for 400
          type: object
        message:
          description: Human readable details about the error
          type: string
      type: object
    ApiInfo:
      properties:
        code:
          description: info code
          type: string
        details:
          description: Full details about info
          type: object
        message:
          description: Human readable details about the information the api is returning
          type: string
      type: object
    ChannelCoPartner:
      properties:
        appName:
          description: app name (visible in user invitation email)
          type: string
        defaultEmailLanguage:
          description: Invitation email language used. It will work only if the template
            for the specified language is configured, if no custom language are configured,
            leave it empty
          type: string
        id:
          description: partner id
          type: string
        idp:
          description: identity provider for partner
          type: string
        name:
          description: partner name
          type: string
        ssoType:
          enum:
          - SAML
          - OAUTH
          type: string
        ssoUrl:
          description: if support sso enabled, the sso url
          type: string
        supportSso:
          description: support sso or not
          type: boolean
      required:
      - id
      - name
      - idp
      type: object
    ChannelCoUser:
      allOf:
      - $ref: '#/components/schemas/ChannelCoUserRequest'
      - properties:
          userId:
            description: Member's user id
            format: int64
            type: integer
          username:
            description: Member's username generated by API. If there is no naming
              conflict it is <firstName.lastName> (in lower case)
            type: string
        type: object
    ChannelCoUserAndCompany:
      allOf:
      - $ref: '#/components/schemas/ChannelCoUser'
      - properties:
          companyId:
            description: company Id of the user
            example: '10'
            type: string
          companyName:
            description: company name of the user
            example: Symphony
            maxLength: 64
            type: string
        type: object
    ChannelCoUserErrorResponse:
      allOf:
      - $ref: '#/components/schemas/ChannelCoUserRequest'
      - properties:
          code:
            description: error code
            example:
              alreadyExisting:
                description: user already existing belong a pod (error message will
                  provide detail about pod url)
                value: USER_ALREADY_EXISTS
              existingComCoCompany:
                description: comco company already exists and the user need access
                value: COMCO_COMPANY_ALREADY_EXISTS_USER_NEED_ACCESS
              existingCompany:
                description: company already exists and the user need access (error
                  message will provide detail about pod url)
                value: COMPANY_ALREADY_EXISTS_USER_NEEDS_ACCESS
              mismatchCompany:
                value: UNEXPECTED_ERROR
            type: string
          message:
            description: Human readable details about the information the api is returning
            type: string
        type: object
    ChannelCoUserRequest:
      description: payload to onboard a channelco user account
      properties:
        department:
          example: Product Engineering
          maxLength: 256
          type: string
        displayName:
          description: if omitted, it will be generated with the pattern <firstName
            lastName>
          example: Paul Smith
          maxLength: 128
          type: string
        email:
          example: foo@example.com
          format: email
          type: string
        firstName:
          example: Paul
          maxLength: 64
          type: string
        lastName:
          example: Smith
          maxLength: 64
          type: string
        location:
          description: country
          type: string
        phoneNumber:
          example: 33612345678
          type: string
        title:
          example: Engineering manager
          maxLength: 256
          type: string
      required:
      - email
      - firstName
      - lastName
      type: object
    ChannelCoUserResponse:
      allOf:
      - $ref: '#/components/schemas/ChannelCoUserRequest'
      - properties:
          code:
            description: info code
            example:
              existingCompany:
                description: company already exists, user added into it
                value: USER_ADDED_EXISTING_COMPANY
              mismatchCompany:
                description: company already exists (lookup by domain name), but the
                  name is different. User is added in the existing one
                value: USER_ADDED_TO_DIFFERENT_COMPANY_NAME
              newCompany:
                description: new company created and user added into it
                value: USER_ADDED_NEW_COMPANY
            type: string
          message:
            description: Human readable details about the information the api is returning
            type: string
          userId:
            description: Member's user id
            format: int64
            type: integer
          username:
            description: Member's username generated by API. It is expected to be
              the same as email
            type: string
        type: object
    ChannelCoUsersListRequest:
      description: payload to onboard channelco users
      properties:
        companyName:
          description: This field is mandatory only if a company with same domain
            (taken from email) does not exist yet
          example: Symphony
          maxLength: 64
          type: string
        users:
          items:
            $ref: '#/components/schemas/ChannelCoUserRequest'
          type: array
      required:
      - companyName
      - users
      type: object
    ChannelCoUsersListResponse:
      properties:
        companyId:
          description: company Id of the users
          example: '10'
          type: string
        companyName:
          description: company name of the users
          example: Symphony
          maxLength: 64
          type: string
        errors:
          items:
            $ref: '#/components/schemas/ChannelCoUserErrorResponse'
          type: array
        success:
          items:
            $ref: '#/components/schemas/ChannelCoUserResponse'
          type: array
      type: object
    Config:
      properties:
        id:
          description: config key
          type: string
        value:
          description: config value
          type: string
      required:
      - id
      type: object
    Role:
      properties:
        id:
          description: role Id
          example: COMPLIANCE_OFFICER
          type: string
      required:
      - id
      type: object
    UpdateChannelCoUserRequest:
      description: payload to update a channelco user account
      properties:
        department:
          example: Product Engineering
          maxLength: 256
          type: string
        displayName:
          example: Paul Smith
          type: string
        email:
          example: foo@example.com
          format: email
          type: string
        firstName:
          example: Paul
          maxLength: 64
          type: string
        lastName:
          example: Smith
          maxLength: 64
          type: string
        location:
          description: country
          type: string
        phoneNumber:
          example: 33612345678
          type: string
        title:
          example: Engineering manager
          maxLength: 256
          type: string
      type: object
    UserOnboardingAvaibilityResponse:
      allOf:
      - $ref: '#/components/schemas/ApiInfo'
      - properties:
          podUrl:
            example: ces4-dev.symphony.com
            type: string
        type: object
  securitySchemes:
    ApiKeyAuth:
      in: query
      name: token
      type: apiKey
    CommonJwtAuth:
      bearerFormat: JWT
      description: Common JWT
      scheme: bearer
      type: http
    JwtAuth:
      bearerFormat: JWT
      description: ExtApp JWT
      scheme: bearer
      type: http
info:
  description: Community Connect public API
  title: Community Connect API
  version: 1.3.0
openapi: 3.0.1
paths:
  /v1/channelco/company/{companyId}/user/{userId}:
    delete:
      operationId: disableUser
      parameters:
      - description: symphony user id
        example: 123456789
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
      - description: company Id of the user
        example: '10'
        in: path
        name: companyId
        required: true
        schema:
          type: string
      responses:
        204:
          description: The user was disabled successfully.
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Something was wrong about the request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized request
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: The user do not exist
      security:
      - JwtAuth: []
      summary: Disable channelco user
      tags:
      - channelco
    get:
      operationId: getUser
      parameters:
      - description: symphony user id
        example: 123456789
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
      - description: company Id of the user
        example: '10'
        in: path
        name: companyId
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelCoUserAndCompany'
          description: body
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Something was wrong about the request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized request
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: The user do not exist
      security:
      - JwtAuth: []
      summary: Get channelco user by companyId and userId
      tags:
      - channelco
    put:
      operationId: updateUser
      parameters:
      - description: symphony user id
        example: 123456789
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
      - description: company Id of the user
        example: '10'
        in: path
        name: companyId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateChannelCoUserRequest'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelCoUser'
          description: body
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Something was wrong about the request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized request
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: The user do not exist
      security:
      - JwtAuth: []
      summary: Update channelco user
      tags:
      - channelco
  /v1/channelco/company/{companyId}/user/{userId}/roles/add:
    post:
      operationId: addRole
      parameters:
      - description: symphony user id
        example: 123456789
        in: path
        name: userId
        required: true
        schema:
          format: int64
          type: integer
      - description: company Id of the user
        example: '10'
        in: path
        name: companyId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
        required: true
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'
          description: body
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Something was wrong about the request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized request
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: The user do not exist
      security:
      - JwtAuth: []
      summary: Adds a role to a channelco user's account
      tags:
      - channelco
  /v1/channelco/user:
    get:
      operationId: searchUser
      parameters:
      - description: user's email
        example: user@comcocompany.com
        in: query
        name: email
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelCoUserAndCompany'
          description: body
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Something was wrong about the request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized request
        404:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: The user do not exist
      security:
      - JwtAuth: []
      summary: Search channelco user
      tags:
      - channelco
    post:
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChannelCoUsersListRequest'
        required: true
      responses:
        201:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelCoUsersListResponse'
          description: body
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Something was wrong about the request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized request
      security:
      - JwtAuth: []
      summary: Create channelco user
      tags:
      - channelco
  /v1/onboarding/tenant:
    get:
      operationId: getUserOnboardingAvailability
      parameters:
      - description: The user email
        example: user@companyDomain.com
        in: query
        name: email
        required: true
        schema:
          type: string
      responses:
        200:
          content:
            application/json:
              example: Company is already on Symphony but user needs access
              schema:
                $ref: '#/components/schemas/UserOnboardingAvaibilityResponse'
          description: Success
        400:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Something was wrong about the request
        401:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
          description: Unauthorized request
      security:
      - ApiKeyAuth: []
      summary: Get user's pod and availability for onboarding
      tags:
      - channelco
security:
- JwtAuth: []
- ApiKeyAuth: []
tags:
- description: Public API for channelco
  name: channelco
