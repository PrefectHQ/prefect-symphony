definitions:
  AckId:
    description: An object containing the ackId (and parameters) associated with events
      that the client has received through an individual feed.
    properties:
      ackId:
        description: A unique id for events that can be deleted from a client's. Empty
          for the first read. If set to null or missing, it will be considered empty.
          feed.
        type: string
      updatePresence:
        default: true
        description: Set to false to avoid updating the user's presence when reading
          events. Default is true.
        type: boolean
    type: object
  AgentInfo:
    properties:
      commitId:
        description: The Git commit ID of the running revision.
        type: string
      hostname:
        description: The hostname of the Agent server.
        type: string
      ipAddress:
        description: The IP address of the Agent server.
        type: string
      onPrem:
        description: Whether this is an on-prem or cloud installation.
        type: boolean
      serverFqdn:
        description: The fully-qualified domain name of the Agent server. Must be
          set by the user at startup.
        type: string
      url:
        description: The URL under which the Agent is available.
        type: string
      version:
        description: The version of the Agent.
        type: string
    type: object
  AttachmentInfo:
    properties:
      id:
        description: The attachment ID.
        type: string
      name:
        description: The file name.
        type: string
      size:
        description: Size in bytes.
        format: int64
        type: integer
    required:
    - id
    - name
    - size
    type: object
  BaseSignal:
    properties:
      companyWide:
        description: Whether the signal is a push signal
        type: boolean
      name:
        description: Signal name
        type: string
      query:
        description: 'The query used to define this signal. The query is defined as
          "field:value" pairs combined by the operators

          "AND" or "OR". Supported fields are (case-insensitive): "author", "hashtag"
          and "cashtag".

          MUST contain at least one "hashtag" or "cashtag" definition.

          '
        type: string
      visibleOnProfile:
        description: Whether the signal is visible on its creator's profile
        type: boolean
    type: object
  ChannelSubscriber:
    properties:
      owner:
        description: True if the subscriber is the creator
        type: boolean
      pushed:
        description: True if the subscriber is allowed to unsubscribe
        type: boolean
      subscriberName:
        description: User display name
        type: string
      subscriptionId:
        type: string
      timestamp:
        description: Timestamp when the signal was subscribed, in milliseconds since
          Jan 1 1970
        format: int64
        type: integer
      userId:
        description: The user ID of the subscriber
        format: int64
        type: integer
    type: object
  ChannelSubscriberResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/ChannelSubscriber'
        type: array
      hasMore:
        description: True if there are more subscribers
        type: boolean
      offset:
        description: The number of subscribers skipped
        format: int64
        type: integer
      total:
        description: The total number of subscribers
        type: integer
    type: object
  ChannelSubscriptionError:
    properties:
      code:
        description: subscription failure code
        type: string
      message:
        description: subscription failure message
        type: string
      userId:
        description: The userId on which failure happened
        format: int64
        type: integer
    type: object
  ChannelSubscriptionResponse:
    properties:
      failedSubscription:
        description: The number of subscription failures
        format: int64
        type: integer
      requestedSubscription:
        description: The number of requested userIds to subscribe
        format: int64
        type: integer
      subscriptionErrors:
        items:
          $ref: '#/definitions/ChannelSubscriptionError'
        type: array
      successfulSubscription:
        description: The number of successful subscriptions done
        format: int64
        type: integer
    type: object
  ConnectionRequestMessage:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        firstRequestedAt:
          format: int64
          type: integer
        requestCounter:
          type: integer
        requestingUserId:
          format: int64
          type: integer
        status:
          type: string
        targetUserId:
          format: int64
          type: integer
        updatedAt:
          format: int64
          type: integer
      type: object
    description: Generated when a connection request is sent.
    type: object
  Error:
    properties:
      code:
        format: int32
        type: integer
      message:
        type: string
    type: object
  MessageSearchQuery:
    properties:
      author:
        description: Search for messages sent by this user ID
        format: int64
        type: integer
      cashtag:
        description: Search for messages containing this cashtag
        type: string
      fromDate:
        description: Search for messages sent on or after this timestamp
        format: int64
        type: integer
      hashtag:
        description: Search for messages containing this hashtag
        type: string
      mention:
        description: Search for messages mentioning this user ID
        format: int64
        type: integer
      signal:
        description: 'Search for messages matching this signal. Can only be combined
          with date filtering and paging parameters.

          '
        type: string
      streamId:
        description: Search for messages sent to this stream
        type: string
      streamType:
        description: 'Search for messages sent to this type of streams. Accepted values
          are CHAT, IM, MIM, ROOM, POST.

          '
        type: string
      text:
        description: Search for messages containing this text. Requires streamId to
          be specified.
        type: string
      toDate:
        description: Search for messages sent before this timestamp
        format: int64
        type: integer
    type: object
  Pagination:
    properties:
      cursors:
        properties:
          after:
            description: 'This is the opaque url-safe string that points to the end
              of the page of data

              that has been returned.

              '
            example: NDMyNzQyODI3OTQw
            type: string
          before:
            description: 'This is the opaque url-safe string that points to the start
              of the page of data

              that has been returned.

              '
            example: MTAxNTExOTQ1MjAwNzI5NDE=
            type: string
        type: object
      next:
        description: 'API endpoint that will return the next page of data. If not
          included, this is the

          last page of data. Due to how pagination works with visibility and privacy,
          it is

          possible that a page may be empty but contain a ''next'' paging link. Stop
          paging when

          the ''next'' link no longer appears.

          '
        example: https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&after=NDMyNzQyODI3OTQw
        type: string
      previous:
        description: 'API endpoint that will return the previous page of data. If
          not included, this is

          the first page of data.

          '
        example: https://tenantapi.d.isym.io/v1/tenantinfo?limit=25&before=MTAxNTExOTQ1MjAwNzI5NDE=
        type: string
    required:
    - cursors
    type: object
  RoomCreatedMessage:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        copyProtected:
          type: boolean
        createdByUserId:
          description: The Symphony userId of the user who created the room.
          format: int64
          type: integer
        creationDate:
          format: int64
          type: integer
        description:
          type: string
        discoverable:
          type: boolean
        keywords:
          items:
            $ref: '#/definitions/RoomTag'
          type: array
        membersCanInvite:
          type: boolean
        name:
          type: string
        public:
          type: boolean
        readOnly:
          type: boolean
      type: object
    description: Generated when a room is created.
    type: object
  RoomDeactivatedMessage:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        deactivatedByUserId:
          format: int64
          type: integer
      type: object
    description: Generated when a room is deactivated.
    type: object
  RoomMemberDemotedFromOwnerMessage:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        demotedByUserId:
          format: int64
          type: integer
        demotedUserId:
          format: int64
          type: integer
      type: object
    description: Generated when a room member is promoted to owner.
    type: object
  RoomMemberPromotedToOwnerMessage:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        promotedByUserId:
          format: int64
          type: integer
        promotedUserId:
          format: int64
          type: integer
      type: object
    description: Generated when a room member is promoted to owner.
    type: object
  RoomReactivatedMessage:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        reactivatedByUserId:
          format: int64
          type: integer
      type: object
    description: Generated when a room is reactivated.
    type: object
  RoomTag:
    description: Room Tag object. A key:value pair describing additional properties
      of the room.
    properties:
      key:
        description: A unique label of the Tag.
        type: string
      value:
        description: The value of this Tag's label.
        type: string
    required:
    - key
    - value
  RoomUpdatedMessage:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        copyProtected:
          type: boolean
        discoverable:
          type: boolean
        keywords:
          items:
            $ref: '#/definitions/RoomTag'
          type: array
        membersCanInvite:
          type: boolean
        newDescription:
          type: string
        newName:
          type: string
        oldDescription:
          type: string
        oldName:
          type: string
        readOnly:
          type: boolean
      type: object
    description: Generated when a room is updated.
    type: object
  ShareArticle:
    properties:
      appIconUrl:
        description: App icon url of the calling application
        type: string
      appId:
        description: App ID of the calling application
        type: string
      appName:
        description: App name of the calling application
        type: string
      articleId:
        description: An ID for this article that should be unique to the calling application.
          Either an articleId or an articleUrl is required.
        type: string
      articleUrl:
        description: Url to the article
        type: string
      author:
        description: Author of the article
        type: string
      message:
        description: The message text that can be send along with the shared article
        type: string
      publishDate:
        description: Article publish date in unix timestamp
        format: int64
        type: integer
      publisher:
        description: Publisher of the article
        type: string
      subTitle:
        description: The subtitle of the article
        type: string
      summary:
        description: Preview summary of the article
        type: string
      thumbnailUrl:
        description: Url to the thumbnail image
        type: string
      title:
        description: The title of the article
        type: string
    required:
    - title
    - publisher
    - author
    - appId
    type: object
  ShareContent:
    properties:
      content:
        $ref: '#/definitions/ShareArticle'
      type:
        description: Type of content to be shared.  Currently only support "com.symphony.sharing.article"
        type: string
    type: object
  Signal:
    allOf:
    - $ref: '#/definitions/BaseSignal'
    - properties:
        companyWide:
          description: Whether the signal is a push signal
          type: boolean
        id:
          description: Signal ID
          type: string
        timestamp:
          description: Timestamp when the signal was created, in milliseconds since
            Jan 1 1970
          format: int64
          type: integer
      type: object
  SignalList:
    items:
      $ref: '#/definitions/Signal'
    type: array
  SimpleMessage:
    description: A string wrapped in a JSON object.
    properties:
      message:
        type: string
    type: object
  SuccessResponse:
    properties:
      format:
        enum:
        - TEXT
        - XML
        type: string
      message:
        type: string
    type: object
  UserJoinedRoomMessage:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        addedByUserId:
          format: int64
          type: integer
        memberAddedUserId:
          format: int64
          type: integer
      type: object
    description: Generated when a user joins a room.
    type: object
  UserLeftRoomMessage:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        informationBarrierRemediation:
          type: boolean
        memberLeftUserId:
          format: int64
          type: integer
        removedByUserId:
          format: int64
          type: integer
      type: object
    description: Generated when a user leaves a room.
    type: object
  V1AuditTrailInitiatorList:
    properties:
      items:
        items:
          $ref: '#/definitions/V1AuditTrailInitiatorResponse'
        type: array
      pagination:
        $ref: '#/definitions/Pagination'
        type: object
    type: object
  V1AuditTrailInitiatorResponse:
    additionalProperties: true
    description: 'Audit Trail Initiator object response.

      The attributes may vary according to the action.

      There are different types of action and each action could have specific attributes.

      '
    properties:
      action:
        description: The audit trail action that has peformed
        type: string
      actionName:
        description: The audit trail action name that has peformed
        type: string
      initiatorEmailAddress:
        description: The user's e-mail address that has performed the action
        type: string
      initiatorId:
        description: The user's id that has performed the action
        type: string
      initiatorUsername:
        description: The username that has performed the action
        type: string
      timestamp:
        description: The timestamp when the action has occurred
        type: string
    type: object
  V1DLPContentType:
    description: A representation of content type of message sent by a user of Symphony
      (message/stream/signal)
    properties:
      type:
        description: content type
        type: string
    type: object
  V1DLPDictionary:
    description: Dictionary object
    properties:
      content:
        $ref: '#/definitions/V1DLPDictionaryContent'
      dictionaryMetadata:
        $ref: '#/definitions/V1DLPDictionaryMetadata'
    required:
    - dictionaryMetadata
    type: object
  V1DLPDictionaryContent:
    description: Content of a dictionary
    properties:
      data:
        description: 'A comma separated string which contains a lot of keywords/regexes.

          '
        type: string
      md5:
        description: MD5 value of the content
        type: string
      numKeywords:
        description: Number of Keywords in dictionary
        format: int32
        type: integer
    type: object
  V1DLPDictionaryMetadata:
    description: Dictionary's metadata (excluding content)
    properties:
      creationDate:
        description: Creation time of the dictionary in milliseconds elapsed as of
          epoch time.
        format: int64
        type: integer
      creatorId:
        description: Numeric userId of the creator
        type: string
      dictRef:
        $ref: '#/definitions/V1DLPDictionaryRef'
      lastUpdatedDate:
        description: The recent update time of the dictionary in milliseconds
        format: int64
        type: integer
      type:
        description: 'The type of dictionary, which specify the content is a list
          of words or a list of regexes.

          By default set to "Word" if not specified. Possible values - Word, Regex

          '
        type: string
    required:
    - dictRef
    - type
    type: object
  V1DLPDictionaryMetadataCollectionResponse:
    description: List of dictionary metadata.
    properties:
      items:
        description: List of dictionary metadata
        items:
          $ref: '#/definitions/V1DLPDictionaryMetadata'
        type: array
      page:
        description: Page number of current page
        format: int32
        type: integer
      pageCount:
        description: Total number of pages available
        format: int32
        type: integer
    type: object
  V1DLPDictionaryMetadataCreateRequest:
    description: Dictionary's metadata (excluding content) to use for dictionary create
      operations.
    properties:
      name:
        description: 'The name of dictionary

          '
        type: string
      type:
        description: 'The type of dictionary, which specify the content is a list
          of words or a list of regexes.

          By default set to "Word" if not specified. Possible values - Word, Regex

          '
        type: string
    required:
    - name
    - type
    type: object
  V1DLPDictionaryMetadataResponse:
    description: Dictionary response containing dictionary metadata.
    properties:
      data:
        $ref: '#/definitions/V1DLPDictionaryMetadata'
    required:
    - data
    type: object
  V1DLPDictionaryMetadataUpdateRequest:
    description: Dictionary's metadata (excluding content) to use for dictionary update
      operations.
    properties:
      name:
        description: 'The name of dictionary

          '
        type: string
    required:
    - name
    type: object
  V1DLPDictionaryRef:
    description: Basic information needed to identify a dictionary
    properties:
      dictId:
        description: Unique dictionary id
        type: string
      name:
        description: Unique name of a dictionary, max 30 characters, with trimmed
          leading and trailing blank spaces.
        type: string
      version:
        description: 'The version of a dictionary, in format "major.minor".

          Initial value will set by backend as "1.0" when created.

          Whenever the dictionary version needs to be changed, the minor version by
          1 unless minor == 999, then the major version is increased by 1 until it
          reaches 999.

          '
        type: string
    required:
    - name
    type: object
  V1DLPMatchedPolicy:
    description: A representation of policy that matched the violation with a list
      of matched keywords in the policy
    properties:
      diagnostic:
        description: 'A diagnostic message containing an error message in the event
          that the

          decryption of terms failed. May also be present in the case of a successful

          call if there is useful narrative to return.

          '
        type: string
      id:
        description: Id of the policy
        type: string
      policyName:
        description: Name of the policy
        type: string
      terms:
        description: List of decrypted matched keywords in the policy
        type: string
      type:
        description: Whether BLOCK or WARN
        type: string
      version:
        description: Version of the policy
        type: string
    type: object
  V1DLPMatchedPolicyList:
    description: List of policies that matched the violation.
    items:
      $ref: '#/definitions/V1DLPMatchedPolicy'
    type: array
  V1DLPOutcome:
    description: A representation of outcome of DLP message/stream/signal sent by
      a user of Symphony
    properties:
      type:
        description: Outcome of DLP enforcement
        type: string
    type: object
  V1DLPPoliciesCollectionResponse:
    description: List of policies
    properties:
      page:
        description: Page number of current page
        format: int32
        type: integer
      pageCount:
        description: Total number of pages available
        format: int32
        type: integer
      policies:
        description: List of policies
        items:
          $ref: '#/definitions/V1DLPPolicy'
        type: array
    type: object
  V1DLPPolicy:
    description: The policy object for expression filter, one policy can have multiple
      dictionaries
    properties:
      active:
        description: Indicate whether the policy is active or not
        type: boolean
      contentTypes:
        description: 'The list of content types that policy should apply to. Cannot
          be empty. Policy content types could be either of "Messages", "RoomMeta",
          "SignalMeta".

          Default is set to ["Messages"] if not specified.

          '
        items:
          type: string
        type: array
      creationDate:
        description: 'Creation time of the policy in milliseconds elapsed as of epoch
          time.

          '
        format: int64
        type: integer
      creatorId:
        description: Numeric userId of the creator
        type: string
      dictionaryRefs:
        description: List of dictionaries.
        items:
          $ref: '#/definitions/V1DLPDictionaryRef'
        type: array
      lastDisabledDate:
        description: 'Recent disable time of the policy in milliseconds elapsed as
          of epoch time.

          '
        format: int64
        type: integer
      lastUpdatedDate:
        description: Recent update time of the policy in milliseconds elapsed as of
          epoch time.
        format: int64
        type: integer
      name:
        description: Unique name of a policy, max 30 characters. Cannot be empty.
          All the leading and trailing blank spaces are trimmed.
        type: string
      policyId:
        description: Policy Id
        type: string
      scopes:
        description: 'List of communication scopes. Possible values are "Internal"
          (for Internal conversations) or "External" (for External conversations).

          You can apply both scopes if you set it to ["Internal", "External"].

          '
        items:
          type: string
        type: array
      type:
        description: Type of policy. Possible values "Block" or "Warn".
        type: string
      version:
        description: 'The version of a dictionary, in format "major.minor". Initial
          value will set by backend as "1.0" when created.

          Whenever the dictionary version needs to be changed, the minor version by
          1 unless minor == 999, then the major version is increased by 1 until it
          reaches 999.

          '
        type: string
    required:
    - contentTypes
    - name
    - scopes
    - type
    type: object
  V1DLPPolicyRequest:
    description: The policy object to use for creating/updating a policy.
    properties:
      contentTypes:
        description: 'The list of content types that policy should apply to. Cannot
          be empty. Policy content types could be either of "Messages", "RoomMeta",
          "SignalMeta".

          Default is set to ["Messages"] if not specified.

          '
        items:
          type: string
        type: array
      dictionaryIds:
        description: List of dictionaries Ids for the policy.
        items:
          type: string
        type: array
      name:
        description: Unique name of a policy, max 30 characters. Cannot be empty.
          All the leading and trailing blank spaces are trimmed.
        type: string
      scopes:
        description: 'List of communication scopes. Possible values are "Internal"
          (for Internal conversations) or "External" (for External conversations).

          You can apply both scopes if you set it to ["Internal", "External"].

          '
        items:
          type: string
        type: array
      type:
        description: Type of policy. Possible values "Block" or "Warn".
        type: string
    required:
    - contentTypes
    - name
    - scopes
    - type
    type: object
  V1DLPPolicyResponse:
    description: Policy Response
    properties:
      data:
        $ref: '#/definitions/V1DLPPolicy'
    type: object
  V1DLPSignal:
    description: Signal details
    properties:
      diagnostic:
        description: 'A diagnostic message containing an error message in the event
          that the

          signal decryption failed. May also be present in the case of a successful

          call if there is useful narrative to return.

          '
        type: string
      name:
        description: Name of the Signal
        type: string
      rules:
        description: Signal rules decrypted.
        type: string
    type: object
  V1DLPStream:
    description: Room details in the context of violation.
    properties:
      active:
        description: Is Room Active
        type: boolean
      allowExternal:
        description: Is external messaging allowed
        type: boolean
      copyDisabled:
        description: Is Room copyDisabled
        type: boolean
      creatorId:
        description: Id of the creator of the Room.
        type: string
      creatorPrettyName:
        description: Name of the creator of the Room.
        type: string
      crossPod:
        description: Is this a cross pod scenario?
        type: boolean
      diagnostic:
        description: 'A diagnostic message containing an error message in the event
          that the

          stream retrieval failed. May also be present in the case of a successful

          call if there is useful narrative to return.

          '
        type: string
      discoverable:
        description: Is Room discoverable
        type: boolean
      externalOwned:
        description: Is Room externalOwned
        type: boolean
      lastDisabled:
        description: Timestamp of last time the room is Disabled
        format: int64
        type: integer
      memberAddUserEnabled:
        description: Is memberAddUserEnabled
        type: boolean
      moderated:
        description: Is room moderated
        type: boolean
      name:
        description: Name of the Stream/Room.
        type: string
      publicRoom:
        description: Is this a public room?
        type: boolean
      readOnly:
        description: Is Room read-only
        type: boolean
      roomDescription:
        description: Description of the Room.
        type: string
      sendMessageDisabled:
        description: Is sendMessage Disabled for this Room
        type: boolean
      shareHistoryEnabled:
        description: Is room shareHistoryEnabled
        type: boolean
      state:
        description: State of the Room (example CREATED etc)
        type: string
      streamId:
        description: ThreadId of the Room.
        type: string
      type:
        description: Type of the Room (example ROOM (or IM or Wall))
        type: string
    type: object
  V1DLPViolation:
    description: A representation of a violation due to a message sent by a user of
      Symphony
    properties:
      action:
        description: action taken such as BLOCK or WARN.  See outcome for a more detailed
          description of the outcome this action.
        type: string
      createTime:
        description: Timestamp of the violation in milliseconds since Jan 1 1970
        format: int64
        type: integer
      enforcementEventID:
        description: Enforcement event ID. Unique ID that identifies this enforcement.
        type: string
      entityID:
        description: Entity ID is the content Id of the violation, for example, for
          messages, its the Id of the message
        type: string
      ignoreDLPwarning:
        description: Did the user chose to ignore DLP warning that was presented?
        type: boolean
      lastModified:
        description: Timestamp of the last modification of violation in milliseconds
          since Jan 1 1970
        format: int64
        type: integer
      matchedPolicies:
        $ref: '#/definitions/V1DLPMatchedPolicyList'
      outcome:
        $ref: '#/definitions/V1DLPOutcome'
      requesterId:
        description: Id of the requester responsible for the message/stream/signal
        format: int64
        type: integer
      version:
        description: Version of application which processed the message and produced
          this violation.
        type: string
    type: object
  V1DLPViolationMessage:
    properties:
      diagnostic:
        description: 'A diagnostic message containing an error message in the event
          there are parsing errors.

          May also be present in the case of a successful call if there is useful
          narrative to return.

          '
        type: string
      message:
        $ref: '#/definitions/V4Message'
      violation:
        $ref: '#/definitions/V1DLPViolation'
    type: object
  V1DLPViolationMessageResponse:
    properties:
      nextOffset:
        description: Offset for the next chunk of violations to be submitted in the
          next request.  Value is null if there are no further violations.
        type: string
      violations:
        description: A representation of list of violations due to messages sent by
          a user of Symphony
        items:
          $ref: '#/definitions/V1DLPViolationMessage'
        type: array
    type: object
  V1DLPViolationSignal:
    properties:
      signal:
        $ref: '#/definitions/V1DLPSignal'
      violation:
        $ref: '#/definitions/V1DLPViolation'
    type: object
  V1DLPViolationSignalResponse:
    properties:
      nextOffset:
        description: Offset for the next chunk of violations to be submitted in the
          next request.  Value is null if there are no further violations.
        type: string
      violations:
        description: A representation of list of violations due to signal creation/update
          sent by a user of Symphony
        items:
          $ref: '#/definitions/V1DLPViolationSignal'
        type: array
    type: object
  V1DLPViolationStream:
    properties:
      stream:
        $ref: '#/definitions/V1DLPStream'
      violation:
        $ref: '#/definitions/V1DLPViolation'
    type: object
  V1DLPViolationStreamResponse:
    properties:
      nextOffset:
        description: Offset for the next chunk of violations to be submitted in the
          next request.  Value is null if there are no further violations.
        type: string
      violations:
        items:
          $ref: '#/definitions/V1DLPViolationStream'
        type: array
    type: object
  V2BaseMessage:
    discriminator: v2messageType
    properties:
      id:
        description: The messageId is assigned by the ingestor service when a message
          is sent.
        type: string
      streamId:
        type: string
      timestamp:
        type: string
      v2messageType:
        type: string
    required:
    - v2messageType
    - timestamp
    - streamId
    type: object
  V2Error:
    properties:
      code:
        format: int32
        type: integer
      details:
        type: object
      message:
        type: string
    required:
    - code
    - message
    type: object
  V2HealthCheckResponse:
    properties:
      agentServiceUser:
        description: Indicates whether agent service user is setup correctly.
        type: boolean
      agentServiceUserError:
        description: Error details in case agent service user is setup incorrectly.
        type: string
      agentVersion:
        description: The version number of the Agent server
        type: string
      ceServiceUser:
        description: Indicates whether CEService user is setup correctly.
        type: boolean
      ceServiceUserError:
        description: Error details in case CEService user is setup incorrectly.
        type: string
      encryptDecryptError:
        description: Error details in case of the encryption or decryption of the
          message fails
        type: string
      encryptDecryptSuccess:
        description: Indicates whether the Agent can successfully decrypt and encrypt
          messages
        type: boolean
      firehoseConnectivity:
        description: Indicates whether the Agent server can connect to Firehose Service
        type: boolean
      firehoseConnectivityError:
        description: Error details in case of no Firehose connectivity
        type: string
      keyManagerConnectivity:
        description: Indicates whether the Agent server can connect to the Key Manager
        type: boolean
      keyManagerConnectivityError:
        description: Error details in case of no Key Manager connectivity
        type: string
      podConnectivity:
        description: Indicates whether the Agent server can connect to the Pod
        type: boolean
      podConnectivityError:
        description: Error details in case of no Pod connectivity
        type: string
      podVersion:
        description: The version number of the pod
        type: string
    type: object
  V2Message:
    allOf:
    - $ref: '#/definitions/V2BaseMessage'
    - properties:
        attachments:
          items:
            $ref: '#/definitions/AttachmentInfo'
          type: array
        fromUserId:
          description: the Symphony userId of the user who sent the message. This
            will be populated by the server (and actually ignored if included when
            sending a message).
          format: int64
          type: integer
        message:
          description: Message text in MessageML
          format: MessageML
          type: string
      required:
      - message
      - fromUserId
      type: object
    description: A representation of a message sent by a user of Symphony.
    type: object
  V2MessageList:
    items:
      $ref: '#/definitions/V2BaseMessage'
    type: array
  V3DLPDictionaryMeta:
    description: Identity of a dictionary.
    properties:
      dictId:
        type: string
      name:
        type: string
      version:
        type: string
    required:
    - dictId
    - version
    - name
    type: object
  V3DLPFileClassifierConfig:
    properties:
      applicableFileTypes:
        description: 'File types that can be applied. Can be ["PDF", "WORD", "EXCEL",
          "POWERPOINT", "ZIP", "CSV", "TXT"].

          '
        items:
          type: string
        type: array
      classifiers:
        additionalProperties:
          type: string
        description: 'Classifier is defined as a Key and its Value: e.g.: "classification":
          "Internal".

          Name and value can contain UTF-8 characters. Neither the name nor value
          cannot be left empty.

          Maximum 30 characters for the name and value, case insensitive.

          If files contains k-v pairs in the classifers map, it means a match. Maximum
          30 classifiers per policy.

          '
        type: object
    required:
    - classifiers
    - applicableFileTypes
    type: object
  V3DLPFileExtensionConfig:
    description: Extension detection config for allowed and blocked types of file
      extensions.
    properties:
      allowLists:
        description: File extensions that are allowed.
        items:
          type: string
        type: array
      blockLists:
        description: File extensions that are blocked.
        items:
          type: string
        type: array
    required:
    - allowLists
    type: object
  V3DLPFilePasswordConfig:
    description: Password protected detection config for files that are password protected
      or not.
    properties:
      applicableFileTypes:
        description: File types that can be applied. Can be ["PDF", "WORD", "EXCEL",
          "POWERPOINT", "ZIP", "CSV", "TXT"].
        items:
          type: string
        type: array
      matchCriteria:
        description: 'Based on the criteria, whether a file is password protected
          or not means a match.

          Can be ["PASSWORD_PROTECTED", "NOT_PASSWORD_PROTECTED"]. The default is
          "NOT_PASSWORD_PROTECTED".

          '
        type: string
    required:
    - applicableFileTypes
    - matchCriteria
    type: object
  V3DLPFileSizeConfig:
    description: File size config defines maximum allowed size of file. Default max
      size limit is 20 MB.
    properties:
      sizeLimit:
        format: int32
        type: integer
    type: object
  V3DLPPoliciesCollectionResponse:
    description: List of policies.
    properties:
      page:
        description: The starting page for pagination.
        format: int32
        type: integer
      pageCount:
        description: Total number of pages available.
        format: int32
        type: integer
      policies:
        description: List of policies.
        items:
          $ref: '#/definitions/V3DLPPolicy'
        type: array
      size:
        description: Size of policies displayed per page.
        format: int32
        type: integer
    type: object
  V3DLPPolicy:
    description: 'A policy is the main entity of V3 policy/rule system. It is responsible
      to define rules and add scope constraints to the engine.

      '
    properties:
      active:
        description: Indicate whether the policy is active or not.
        type: boolean
      appliesTo:
        items:
          $ref: '#/definitions/V3DLPPolicyAppliesTo'
        type: array
      creationDate:
        description: 'Creation time of the policy in milliseconds elapsed as of epoch
          time.

          '
        format: int64
        type: integer
      creatorId:
        description: Numeric userId of the creator.
        format: int64
        type: integer
      deleted:
        description: Indicate whether the policy is deleted or not.
        type: boolean
      id:
        description: Unique identifier for policy.
        type: string
      lastDisabledDate:
        description: 'Recent disable time of the policy in milliseconds elapsed as
          of epoch.

          time.

          '
        format: int64
        type: integer
      lastUpdatedDate:
        description: 'Recent update time of the policy in milliseconds elapsed as
          of epoch.

          time.

          '
        format: int64
        type: integer
      name:
        description: 'Unique name of policy, max 30 characters. Cannot be empty. All
          the leading and trailing blank spaces are trimmed.

          '
        type: string
      policyId:
        description: Policy Id.
        type: string
      scopes:
        description: 'List of communication scopes. Possible values are "Internal"
          (for Internal conversations) or "External" (for External conversations).

          You can apply both scopes if you set it to ["Internal", "External"].

          '
        items:
          type: string
        type: array
      systemPolicy:
        type: boolean
      version:
        description: 'The version of the policy, in format "major.minor". Initial
          value will set by backend as "3.0" when created.

          Whenever the policy version needs to be changed, the minor version by 1
          unless minor == 999,

          then the major version is increased by 1 until it reaches 999.

          '
        type: string
    type: object
  V3DLPPolicyAppliesTo:
    properties:
      action:
        description: 'Action to be taken on violation detection.

          Can be ["Block", "Warn", "LogOnly"]. The default is "LogOnly".

          '
        type: string
      dataType:
        description: 'The list of data types that policy should apply to. Can''t be
          empty.

          Can be ["Messages","RoomMeta", "SignalMeta", "FileContent", "FileMeta"].

          '
        type: string
      rules:
        items:
          $ref: '#/definitions/V3DLPRule'
        type: array
    required:
    - dataType
    - action
    - rules
    type: object
  V3DLPPolicyRequest:
    description: Request to be used to get policies.
    properties:
      appliesTo:
        items:
          $ref: '#/definitions/V3DLPPolicyAppliesTo'
        type: array
      name:
        description: 'Unique name of a policy, max 30 characters. Cannot be empty.
          All the leading and trailing blank spaces are trimmed.

          '
        type: string
      scopes:
        description: 'List of communication scopes. Possible values are "Internal"
          (for Internal conversations) or "External" (for External conversations).

          You can apply both scopes if you set it to ["Internal", "External"].

          '
        items:
          type: string
        type: array
    required:
    - name
    - scopes
    - appliesTo
    type: object
  V3DLPPolicyResponse:
    description: Policy Response.
    properties:
      data:
        $ref: '#/definitions/V3DLPPolicy'
    type: object
  V3DLPRule:
    description: 'A Rule defines the actual matching specification for policies. It
      holds a type and a configuration

      for the rule, these properties should be used to build the corresponding matching
      implementation.

      Only one of the configuration property should be set [textMatchConfig, fileSizeConfig,
      fileExtensionConfig, filePasswordConfig, fileClassifierConfig].

      '
    properties:
      fileClassifierConfig:
        $ref: '#/definitions/V3DLPFileClassifierConfig'
      fileExtensionConfig:
        $ref: '#/definitions/V3DLPFileExtensionConfig'
      filePasswordConfig:
        $ref: '#/definitions/V3DLPFilePasswordConfig'
      fileSizeConfig:
        $ref: '#/definitions/V3DLPFileSizeConfig'
      id:
        type: string
      name:
        description: Name for rule.
        type: string
      textMatchConfig:
        $ref: '#/definitions/V3DLPTextMatchConfig'
      type:
        description: Type of a rule used by policy. Can be ["UNKNOWN", "TEXT_MATCH",
          "FILE_EXTENSION", "FILE_SIZE", "FILE_PASSWORD", "FILE_CLASSIFIER"].
        type: string
    required:
    - type
    - name
    type: object
  V3DLPTextMatchConfig:
    description: 'This is a configuration that can be used to match text or regex.

      Configuration that can be used by a rule. This is a configuration that can be
      used to match text or regex.

      This configuration also corresponds to V2 TextMatch/RegexMatch of dictionaries.

      '
    properties:
      applicableFileTypes:
        description: 'File types must be applied only for rule type "FileContent",
          otherwise must be empty.

          Can be ["PDF", "WORD", "EXCEL", "POWERPOINT", "ZIP", "CSV", "TXT"].

          '
        items:
          type: string
        type: array
      countUniqueOccurrences:
        format: int32
        type: integer
      dictionaries:
        items:
          $ref: '#/definitions/V3DLPDictionaryMeta'
        type: array
    type: object
  V3DLPViolation:
    description: A representation of a violation due to an event created by a user
      of Symphony
    properties:
      action:
        description: action taken such as BLOCK or WARN.  See outcome for a more detailed
          description of the outcome this action.
        type: string
      createTime:
        description: Timestamp of the violation in milliseconds since Jan 1 1970
        format: int64
        type: integer
      details:
        description: JSON representation of the details of the violation.
        items:
          type: object
        type: array
      enforcementEventID:
        description: Enforcement event ID. Unique ID that identifies this enforcement.
        type: string
      entityID:
        description: Entity ID is the content Id of the violation, for example, for
          messages, its the Id of the message
        type: string
      ignoreDLPwarning:
        description: Did the user chose to ignore DLP warning that was presented?
        type: boolean
      lastModified:
        description: Timestamp of the last modification of violation in milliseconds
          since Jan 1 1970
        format: int64
        type: integer
      outcome:
        $ref: '#/definitions/V1DLPOutcome'
      requesterId:
        description: Id of the requester responsible for the message/stream/signal
        format: int64
        type: integer
      version:
        description: Version of application which processed the message and produced
          this violation.
        type: string
    type: object
  V3DLPViolationMessage:
    properties:
      diagnostic:
        description: 'A diagnostic message containing an error message in the event
          there are parsing errors.

          May also be present in the case of a successful call if there is useful
          narrative to return.

          '
        type: string
      message:
        $ref: '#/definitions/V4Message'
      sharedMessage:
        $ref: '#/definitions/V4Message'
        description: Shared message details if present in message.
      violation:
        $ref: '#/definitions/V3DLPViolation'
    type: object
  V3DLPViolationMessageResponse:
    properties:
      nextOffset:
        description: Offset for the next chunk of violations to be submitted in the
          next request.  Value is null if there are no further violations.
        type: string
      violations:
        description: A representation of list of violations due to messages sent by
          a user of Symphony
        items:
          $ref: '#/definitions/V3DLPViolationMessage'
        type: array
    type: object
  V3DLPViolationSignal:
    properties:
      signal:
        $ref: '#/definitions/V1DLPSignal'
      violation:
        $ref: '#/definitions/V3DLPViolation'
    type: object
  V3DLPViolationSignalResponse:
    properties:
      nextOffset:
        description: Offset for the next chunk of violations to be submitted in the
          next request.  Value is null if there are no further violations.
        type: string
      violations:
        description: A representation of list of violations due to signal creation/update
          sent by a user of Symphony
        items:
          $ref: '#/definitions/V3DLPViolationSignal'
        type: array
    type: object
  V3DLPViolationStream:
    properties:
      stream:
        $ref: '#/definitions/V1DLPStream'
      violation:
        $ref: '#/definitions/V3DLPViolation'
    type: object
  V3DLPViolationStreamResponse:
    properties:
      nextOffset:
        description: Offset for the next chunk of violations to be submitted in the
          next request.  Value is null if there are no further violations.
        type: string
      violations:
        items:
          $ref: '#/definitions/V3DLPViolationStream'
        type: array
    type: object
  V3Health:
    properties:
      services:
        additionalProperties:
          $ref: '#/definitions/V3HealthComponent'
        type: object
      status:
        $ref: '#/definitions/V3HealthStatus'
      users:
        additionalProperties:
          $ref: '#/definitions/V3HealthComponent'
        type: object
      version:
        description: Required Agent verison
        type: string
    type: object
  V3HealthAuthType:
    description: Type of authentication
    enum:
    - RSA
    - CERT
    type: string
  V3HealthComponent:
    properties:
      authType:
        $ref: '#/definitions/V3HealthAuthType'
      message:
        description: An error message, if the component status is DOWN
        type: string
      status:
        $ref: '#/definitions/V3HealthStatus'
      version:
        description: Optional component version
        type: string
    type: object
  V3HealthStatus:
    description: Application health status.
    enum:
    - UP
    - DOWN
    type: string
  V4AttachmentInfo:
    properties:
      id:
        description: The attachment ID.
        type: string
      images:
        items:
          $ref: '#/definitions/V4ThumbnailInfo'
        type: array
      name:
        description: The file name.
        type: string
      size:
        description: Size in bytes.
        format: int64
        type: integer
    required:
    - id
    - name
    - size
    type: object
  V4ConnectionAccepted:
    properties:
      fromUser:
        $ref: '#/definitions/V4User'
    type: object
  V4ConnectionRequested:
    properties:
      toUser:
        $ref: '#/definitions/V4User'
    type: object
  V4Event:
    properties:
      diagnostic:
        description: 'Details if event failed to parse for any reason.  The contents
          of this field may not be useful,

          depending on the nature of the error. Only present when error occurs.

          '
        type: string
      id:
        description: Event ID
        type: string
      initiator:
        $ref: '#/definitions/V4Initiator'
      messageId:
        description: Message ID
        type: string
      payload:
        $ref: '#/definitions/V4Payload'
      timestamp:
        description: Timestamp of event
        format: int64
        type: integer
      type:
        description: "Event type, possible events are:\n  - MESSAGESENT\n  - SHAREDPOST\n\
          \  - INSTANTMESSAGECREATED\n  - ROOMCREATED\n  - ROOMUPDATED\n  - ROOMDEACTIVATED\n\
          \  - ROOMREACTIVATED\n  - USERJOINEDROOM\n  - USERLEFTROOM\n  - ROOMMEMBERPROMOTEDTOOWNER\n\
          \  - ROOMMEMBERDEMOTEDFROMOWNER\n  - CONNECTIONREQUESTED\n  - CONNECTIONACCEPTED\n\
          \  - MESSAGESUPPRESSED\n  - SYMPHONYELEMENTSACTION\n  - USERREQUESTEDTOJOINROOM\n"
        type: string
    type: object
  V4EventList:
    items:
      $ref: '#/definitions/V4Event'
    type: array
  V4ImportResponse:
    properties:
      diagnostic:
        description: 'A diagnostic message containing an error message in the event
          that the

          message import failed. May also be present in the case of a successful

          call if there is useful narrative to return.

          '
        type: string
      messageId:
        description: 'If the message was successfully imported then the message ID
          in the system

          of the newly created message.

          '
        type: string
      originalMessageId:
        description: 'The ID of the message in the original system.

          '
        type: string
      originatingSystemId:
        description: 'The ID of the system through which the message was originally
          sent.

          '
        type: string
    type: object
  V4ImportResponseList:
    items:
      $ref: '#/definitions/V4ImportResponse'
    type: array
  V4ImportedMessage:
    description: 'A historic message to be imported into the system.

      The importing user must have the Content Management role.

      Also, the importing user must be a member of the conversation it is importing
      into.

      The user that the message is intended to have come from must also be present
      in the conversation.

      The intended message timestamp must be a valid time from the past. It cannot
      be a future timestamp.

      By design, imported messages do not stream to datafeed or firehose endpoints.

      '
    properties:
      attachments:
        description: List of message attachments. Since Agent 20.14.
        items:
          $ref: '#/definitions/V4ImportedMessageAttachment'
        type: array
        x-since: 20.14
      data:
        description: Entity data in EntityJSON
        format: JSON
        type: string
      intendedMessageFromUserId:
        description: 'The long integer userid of the Symphony user who you intend
          to show sent the message.

          '
        format: int64
        type: integer
      intendedMessageTimestamp:
        description: 'The timestamp representing the time when the message was sent
          in the original system

          in milliseconds since Jan 1st 1970.

          '
        format: int64
        type: integer
      message:
        description: Message text in MessageMLV2
        format: MessageML
        type: string
      originalMessageId:
        description: 'The ID of the message in the original system.

          '
        type: string
      originatingSystemId:
        description: 'The ID of the system through which the message was originally
          sent.

          '
        type: string
      previews:
        description: List of attachments previews. Since Agent 20.14.
        items:
          $ref: '#/definitions/V4ImportedMessageAttachment'
        type: array
        x-since: 20.14
      streamId:
        type: string
    required:
    - message
    - intendedMessageTimestamp
    - intendedMessageFromUserId
    - originatingSystemId
    - streamId
    type: object
  V4ImportedMessageAttachment:
    properties:
      content:
        description: Attachment content as Base64 encoded string
        type: string
      filename:
        description: Attachment filename
        example: car.png
        type: string
    type: object
  V4Initiator:
    properties:
      user:
        $ref: '#/definitions/V4User'
    type: object
  V4InstantMessageCreated:
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4KeyValuePair:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  V4Message:
    description: A representation of a message sent by a user of Symphony
    properties:
      attachments:
        description: Message attachments
        items:
          $ref: '#/definitions/V4AttachmentInfo'
        type: array
      data:
        description: Message data in EntityJSON
        format: JSON
        type: string
      diagnostic:
        description: 'Details if event failed to parse for any reason.  The contents
          of this field may not be useful,

          depending on the nature of the error. Only present when error occurs.

          '
        type: string
      disclaimer:
        description: 'Message that may be sent along with a regular message if configured
          for the POD,

          usually the first message sent in a room that day.

          '
        type: string
      externalRecipients:
        description: Indicates if the message have external recipients. Only present
          on real time messaging.
        type: boolean
      initialMessageId:
        description: Id the the initial message that has been updated (present only
          if set)
        type: string
      initialTimestamp:
        description: Timestamp of when the initial message has been created in milliseconds
          since Jan 1 1970 (present only if set)
        format: int64
        type: integer
      message:
        description: Message content in MessageMLV2
        format: MessageMLV2
        type: string
      messageId:
        description: Id of the message
        type: string
      originalFormat:
        description: 'Indicates the format in which the message was originally sent.  This
          could have been either:

          - com.symphony.markdown - Markdown OR Message ML V1

          - com.symphony.messageml.v2 - Message ML V2

          '
        type: string
      parentMessageId:
        description: Id of the parent message, set when the message is a reply to
          another message or a forwarded message. Since Agent 20.14.
        type: string
        x-since: 20.14
      replacedBy:
        description: Id of the message that the current message is being replaced
          with (present only if set)
        type: string
      replacing:
        description: Id of the message that the current message is replacing (present
          only if set)
        type: string
      sharedMessage:
        $ref: '#/definitions/V4Message'
        description: Only present when the message represented by this class is a
          wall post sharing another message.
      sid:
        description: 'Unique session identifier from where the message was created.

          '
        example: fa691cd3-484a-4109-aeb2-57c05b78c95b
        type: string
      silent:
        description: When false the user/s will receive the message update as unread
          (true by default). Since Agent 20.14.
        type: boolean
        x-since: 20.14
      stream:
        $ref: '#/definitions/V4Stream'
      timestamp:
        description: Timestamp of the message in milliseconds since Jan 1 1970
        format: int64
        type: integer
      user:
        $ref: '#/definitions/V4User'
      userAgent:
        description: 'User agent string for client that sent the message.  Allows
          callers to identify which client sent the

          origin message (e.g. API Agent, SFE Client, mobile, etc)

          '
        type: string
    type: object
  V4MessageBlastResponse:
    description: Wrapper response for a single message sent to multiple streams
    properties:
      errors:
        additionalProperties:
          $ref: '#/definitions/Error'
        description: List of streams where the messages ingestion has failed
        type: object
      messages:
        description: List of messages successfully sent
        items:
          $ref: '#/definitions/V4Message'
        type: array
    type: object
  V4MessageImportList:
    description: 'An ordered list of historic messages to be imported.

      A list of import responsees will be returned in the same order.

      '
    items:
      $ref: '#/definitions/V4ImportedMessage'
    type: array
  V4MessageList:
    items:
      $ref: '#/definitions/V4Message'
    type: array
  V4MessageSent:
    properties:
      message:
        $ref: '#/definitions/V4Message'
    type: object
  V4MessageSuppressed:
    properties:
      messageId:
        type: string
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4Payload:
    properties:
      connectionAccepted:
        $ref: '#/definitions/V4ConnectionAccepted'
      connectionRequested:
        $ref: '#/definitions/V4ConnectionRequested'
      instantMessageCreated:
        $ref: '#/definitions/V4InstantMessageCreated'
      messageSent:
        $ref: '#/definitions/V4MessageSent'
      messageSuppressed:
        $ref: '#/definitions/V4MessageSuppressed'
      roomCreated:
        $ref: '#/definitions/V4RoomCreated'
      roomDeactivated:
        $ref: '#/definitions/V4RoomDeactivated'
      roomMemberDemotedFromOwner:
        $ref: '#/definitions/V4RoomMemberDemotedFromOwner'
      roomMemberPromotedToOwner:
        $ref: '#/definitions/V4RoomMemberPromotedToOwner'
      roomReactivated:
        $ref: '#/definitions/V4RoomReactivated'
      roomUpdated:
        $ref: '#/definitions/V4RoomUpdated'
      sharedPost:
        $ref: '#/definitions/V4SharedPost'
      symphonyElementsAction:
        $ref: '#/definitions/V4SymphonyElementsAction'
      userJoinedRoom:
        $ref: '#/definitions/V4UserJoinedRoom'
      userLeftRoom:
        $ref: '#/definitions/V4UserLeftRoom'
      userRequestedToJoinRoom:
        $ref: '#/definitions/V4UserRequestedToJoinRoom'
    type: object
  V4RoomCreated:
    properties:
      roomProperties:
        $ref: '#/definitions/V4RoomProperties'
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4RoomDeactivated:
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4RoomMemberDemotedFromOwner:
    properties:
      affectedUser:
        $ref: '#/definitions/V4User'
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4RoomMemberPromotedToOwner:
    properties:
      affectedUser:
        $ref: '#/definitions/V4User'
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4RoomProperties:
    properties:
      canViewHistory:
        type: boolean
      copyProtected:
        type: boolean
      createdDate:
        description: Timestamp
        format: int64
        type: integer
      creatorUser:
        $ref: '#/definitions/V4User'
      crossPod:
        type: boolean
      description:
        type: string
      discoverable:
        type: boolean
      external:
        type: boolean
      keywords:
        items:
          $ref: '#/definitions/V4KeyValuePair'
        type: array
      membersCanInvite:
        type: boolean
      name:
        type: string
      public:
        type: boolean
      readOnly:
        type: boolean
    type: object
  V4RoomReactivated:
    properties:
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4RoomUpdated:
    properties:
      newRoomProperties:
        $ref: '#/definitions/V4RoomProperties'
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4SharedPost:
    properties:
      message:
        $ref: '#/definitions/V4Message'
      sharedMessage:
        $ref: '#/definitions/V4Message'
    type: object
  V4Stream:
    properties:
      crossPod:
        type: boolean
      external:
        type: boolean
      members:
        description: Applicable only to IM Created
        items:
          $ref: '#/definitions/V4User'
        type: array
      roomName:
        description: Applicable only to rooms
        type: string
      streamId:
        description: Id of stream
        type: string
      streamType:
        description: "Stream type, possible values are:\n  - IM\n  - MIM\n  - ROOM\n\
          \  - POST\n"
        type: string
    type: object
  V4SymphonyElementsAction:
    properties:
      formId:
        description: The id of the Form element
        type: string
      formMessageId:
        description: The id of the message that contains the Form
        type: string
      formValues:
        description: The values (in JSON format) answered on the Form
        type: object
      stream:
        $ref: '#/definitions/V4Stream'
        description: The stream where the Form message was posted
    type: object
  V4ThumbnailInfo:
    properties:
      dimension:
        description: The thumbnail pixel size.
        type: string
      id:
        description: The thumbnail ID.
        type: string
    type: object
  V4User:
    properties:
      displayName:
        description: User display name
        type: string
      email:
        description: Email of user
        type: string
      firstName:
        description: First name of user
        type: string
      lastName:
        description: Last name of user
        type: string
      userId:
        description: Id of user
        format: int64
        type: integer
      username:
        description: Applicable only to internal users
        type: string
    type: object
  V4UserJoinedRoom:
    properties:
      affectedUser:
        $ref: '#/definitions/V4User'
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4UserLeftRoom:
    properties:
      affectedUser:
        $ref: '#/definitions/V4User'
      stream:
        $ref: '#/definitions/V4Stream'
    type: object
  V4UserRequestedToJoinRoom:
    properties:
      affectedUsers:
        description: List of affected users by the action (i.e. owners of the room)
        items:
          $ref: '#/definitions/V4User'
        type: array
      stream:
        $ref: '#/definitions/V4Stream'
        description: The stream that the user requested to join
    type: object
  V5Datafeed:
    description: Container for the feed ID
    example:
      id: 8e7c8672-220...
    properties:
      createdAt:
        description: Datafeed creation timestamp
        format: int64
        type: integer
      id:
        description: ID of the datafeed
        type: string
    type: object
  V5DatafeedCreateBody:
    properties:
      tag:
        description: A unique identifier to ensure uniqueness of the datafeed.
        maxLength: 100
        type: string
    type: object
  V5EventList:
    properties:
      ackId:
        description: The ackId which acknowledges that the current batch of messages
          have been successfully received by the client
        type: string
      events:
        items:
          $ref: '#/definitions/V4Event'
        type: array
    type: object
  V5EventsReadBody:
    properties:
      ackId:
        description: should be empty for the first call, acknowledges that the current
          batch of messages have been successfully received by the client.
        type: string
      eventTypes:
        description: 'At least one value is required if the type of feed is "datahose".
          Values must be a valid Real-Time Event type, i.e. one of:

          * MESSAGESENT

          * MESSAGESUPPRESSED

          * SYMPHONYELEMENTSACTION

          * SHAREDPOST

          * INSTANTMESSAGECREATED

          * ROOMCREATED

          * ROOMUPDATED

          * ROOMDEACTIVATED

          * ROOMREACTIVATED

          * USERREQUESTEDTOJOINROOM

          * USERJOINEDROOM

          * USERLEFTROOM

          * ROOMMEMBERPROMOTEDTOOWNER

          * ROOMMEMBERDEMOTEDFROMOWNER

          * CONNECTIONREQUESTED

          * CONNECTIONACCEPTED

          '
        items:
          type: string
        type: array
        x-since: 22.7
      tag:
        description: A unique identifier to ensure uniqueness of the datafeed.
        maxLength: 80
        minLength: 1
        type: string
      type:
        description: type of the feed. Allowed values are "fanout" and "datahose"
        type: string
      updatePresence:
        description: whether to update the presence status of the account to AVAILABLE
          when calling the endpoint. Default value is true.
        type: boolean
    required:
    - type
    - tag
    type: object
info:
  description: 'This document refers to Symphony API calls to send and receive messages

    and content. They need the on-premise Agent installed to perform

    decryption/encryption of content.


    - sessionToken and keyManagerToken can be obtained by calling the

    authenticationAPI on the symphony back end and the key manager

    respectively. Refer to the methods described in authenticatorAPI.yaml.

    - A new authorizationToken has been introduced in the authenticationAPI

    response payload. It can be used to replace the sessionToken in any of

    the API calls and can be passed as "Authorization" header.

    - Actions are defined to be atomic, ie will succeed in their entirety

    or fail and have changed nothing.

    - If it returns a 40X status then it will have sent no message to any

    stream even if a request to some subset of the requested streams

    would have succeeded.

    - If this contract cannot be met for any reason then this is an error

    and the response code will be 50X.

    - MessageML is a markup language for messages. See reference here:

    https://rest-api.symphony.com/docs/messagemlv2

    - **Real Time Events**: The following events are returned when reading

    from a real time messages and events stream ("datafeed"). These

    events will be returned for datafeeds created with the v5 endpoints.

    To know more about the endpoints, refer to Create Messages/Events

    Stream and Read Messages/Events Stream. Unless otherwise specified,

    all events were added in 1.46.

    '
  title: Agent API
  version: 22.7.1
paths:
  /v1/audittrail/privilegeduser:
    get:
      description: Get a list of actions performed by a privileged account acting
        as privileged user given a period of time.
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: 'Start timestamp in unix timestamp in millseconds.

          '
        format: int64
        in: query
        name: startTimestamp
        required: true
        type: integer
      - description: 'End timestamp in unix timestamp in millseconds.

          If not specified, it assumes to be current time.

          '
        format: int64
        in: query
        name: endTimestamp
        required: false
        type: integer
      - description: "Return results from an opaque \u201Cbefore\u201D cursor value\
          \ as presented via a response cursor.\n"
        in: query
        name: before
        required: false
        type: string
      - description: "Return results from an opaque \u201Cafter\u201D cursor value\
          \ as presented via a response cursor.\n"
        in: query
        name: after
        required: false
        type: string
      - description: 'Max No. of violations to return. If no value is provided, 50
          is the default.

          Some maximums for limit may be enforced for performance reasons.

          The maximum supported value is 500.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: 'If present, only the initiator with this initiator <user id>
          will be returned.

          '
        format: int64
        in: query
        name: initiatorId
        type: integer
      - description: 'If present, only the audit trail initiated by s user with privileged
          role acting as

          privileged user will be returned.

          Privileged eliglible roles:

          User Provisioning (USER_PROVISIONING),

          Content Management (CONTENT_MANAGEMENT),

          Expression Filter Policy Management (EF_POLICY_MANAGEMENT),

          SCO (SUPER_COMPLIANCE_OFFICER),

          CO (COMPLIANCE_OFFICER),

          Super admin (SUPER_ADMINISTRATOR),

          Admin (ADMINISTRATOR),

          L1 (L1_SUPPORT),

          L2 (L2_SUPPORT),

          Scope Manager (SCOPE_MANAGEMENT)

          '
        in: query
        name: role
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V1AuditTrailInitiatorList'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get a list of  actions performed by a privileged account acting as
        privileged user given a period of time.
      tags:
      - AuditTrail
  /v1/dlp/dictionaries:
    get:
      description: 'Get all dictionary metadatas with the latest version. Each dictionary
        object will only contain meta data of the content.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Optional parameter to specify which page to return (default is
          0)
        format: int32
        in: query
        name: page
        required: false
        type: integer
      - description: 'Optional parameter to specify the number of result to return
          per page, default is 50. Maximum is 50.

          '
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPDictionaryMetadataCollectionResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get all dictionary metadatas
      tags:
      - DLP Policies and Dictionary Management
    post:
      consumes:
      - application/json
      description: 'Creates a dictionary with basic metadata and no content. Only
        "name" and "type" field is used to create a new dictionary entry.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/V1DLPDictionaryMetadataCreateRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPDictionaryMetadataResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Create a dictionary
      tags:
      - DLP Policies and Dictionary Management
  /v1/dlp/dictionaries/{dictId}:
    delete:
      description: 'Deletes a dictionary.

        Note: All related policies will be affected.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier
        in: path
        name: dictId
        required: true
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPDictionaryMetadataResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a dictionary
      tags:
      - DLP Policies and Dictionary Management
    get:
      description: Get basic information for a dictionary.
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier
        in: path
        name: dictId
        required: true
        type: string
      - description: 'If set to be valid dictionary version number, will return dictionary
          metadata with specified version. Otherwise, return the latest dictionary
          metadata.

          '
        in: query
        name: dictVersion
        required: false
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPDictionaryMetadataResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get dictionary metadata
      tags:
      - DLP Policies and Dictionary Management
    put:
      consumes:
      - application/json
      description: 'Updates the dictionary''s basic metadata without content.

        This API cannot be used for creating a new dictionary.

        In case of update only "name" can be changed.

        Note: All related policies will also have versions updated.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier
        in: path
        name: dictId
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/V1DLPDictionaryMetadataUpdateRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPDictionaryMetadataResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Updates a dictionary
      tags:
      - DLP Policies and Dictionary Management
  /v1/dlp/dictionaries/{dictId}/data/download:
    get:
      consumes:
      - application/json
      description: Downloads Base 64 encoded dictionary content.
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier
        in: path
        name: dictId
        required: true
        type: string
      - description: 'If set to be valid dictionary version number, will return dictionary
          with specified version. Otherwise, return the latest dictionary.

          '
        in: query
        name: dictVersion
        required: false
        type: string
      produces:
      - application/octet-stream
      responses:
        '200':
          description: Attachment body as Base64 encoded string.
          schema:
            format: byte
            type: string
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Downloads Base 64 encoded dictionary content.
      tags:
      - DLP Policies and Dictionary Management
  /v1/dlp/dictionaries/{dictId}/data/upload:
    post:
      consumes:
      - multipart/form-data
      description: Override dictionary content with provided content.
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier
        in: path
        name: dictId
        required: true
        type: string
      - in: formData
        name: data
        required: true
        type: file
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPDictionaryMetadataResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Override dictionary content with provided content.
      tags:
      - DLP Policies and Dictionary Management
  /v1/dlp/policies:
    get:
      description: Get all policies
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Optional parameter to specify which page to return (default is
          0)
        format: int32
        in: query
        name: page
        required: false
        type: integer
      - description: 'Optional parameter to specify the number of result to return
          per page, default is 50. Maximum is 50.

          '
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPPoliciesCollectionResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get all policies
      tags:
      - DLP Policies and Dictionary Management
    post:
      consumes:
      - application/json
      description: 'Creates a new policy with dictionary references.


        At the time of policy creation, the caller should only provide - contentTypes,
        name, scopes and type. The rest of the information is populated automatically.


        Note - You need to enable the policy after creation to start enforcing the
        policy.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Details about the policy that should be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/V1DLPPolicyRequest'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Creates a policy
      tags:
      - DLP Policies and Dictionary Management
  /v1/dlp/policies/{policyId}:
    delete:
      description: 'Delete a policy.

        Note: Only disabled policy can be deleted

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier.
        in: path
        name: policyId
        required: true
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a policy
      tags:
      - DLP Policies and Dictionary Management
    get:
      description: Get a policy
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier.
        in: path
        name: policyId
        required: true
        type: string
      - description: 'Optional parameter, if set to be valid policy version number,  will
          return policy with specified policyVersion. Otherwise, return the latest
          policy.

          '
        in: query
        name: policyVersion
        required: false
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get a policy
      tags:
      - DLP Policies and Dictionary Management
    put:
      consumes:
      - application/json
      description: 'Update the policy (name, type, contentTypes, scopes) and also
        the dictionaries for a policy.

        Warning: If you send empty list of dictionaries during the update operation,
        then all the

        dictionaries for this policy are deleted and policy is automatically disabled.

        Note: The policy should already exist.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier.
        in: path
        name: policyId
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/V1DLPPolicyRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Updates a policy. Cannot be used for creation.
      tags:
      - DLP Policies and Dictionary Management
  /v1/dlp/policies/{policyId}/disable:
    post:
      description: Disables a policy.
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - in: path
        name: policyId
        required: true
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Disables a policy.
      tags:
      - DLP Policies and Dictionary Management
  /v1/dlp/policies/{policyId}/enable:
    post:
      description: Enables a policy.
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - in: path
        name: policyId
        required: true
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V1DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Enables a policy.
      tags:
      - DLP Policies and Dictionary Management
  /v1/dlp/violations/message:
    get:
      description: 'TBD

        '
      parameters:
      - description: 'Timestamp of the first required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          '
        format: int64
        in: query
        name: startTime
        required: true
        type: integer
      - description: 'Timestamp of the last required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          If unspecified, it will default to current time of the request.

          '
        format: int64
        in: query
        name: endTime
        required: false
        type: integer
      - description: 'Offset of the next chunk of violations. Value is null for the
          first request.

          '
        in: query
        name: next
        required: false
        type: string
      - description: 'Max No. of violations to return. If no value is provided, 50
          is the default. The maximum supported value is 500.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V1DLPViolationMessageResponse'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get violations as a result of policy enforcement on messages.
      tags:
      - Violations
  /v1/dlp/violations/signal:
    get:
      description: 'TBD

        '
      parameters:
      - description: 'Timestamp of the first required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          '
        format: int64
        in: query
        name: startTime
        required: true
        type: integer
      - description: 'Timestamp of the last required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          If unspecified, it will default to current time of the request.

          '
        format: int64
        in: query
        name: endTime
        required: false
        type: integer
      - description: 'Offset of the next chunk of violations. Value is null for the
          first request.

          '
        in: query
        name: next
        required: false
        type: string
      - description: 'Max No. of violations to return. If no value is provided, 50
          is the default. The maximum supported value is 500.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V1DLPViolationSignalResponse'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get violations as a result of policy enforcement on signals.
      tags:
      - Violations
  /v1/dlp/violations/stream:
    get:
      description: 'TBD

        '
      parameters:
      - description: 'Timestamp of the first required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          '
        format: int64
        in: query
        name: startTime
        required: true
        type: integer
      - description: 'Timestamp of the last required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          If unspecified, it will default to current time of the request.

          '
        format: int64
        in: query
        name: endTime
        required: false
        type: integer
      - description: 'Offset of the next chunk of violations. Value is null for the
          first request.

          '
        in: query
        name: next
        required: false
        type: string
      - description: 'Max No. of violations to return. If no value is provided, 50
          is the default. The maximum supported value is 500.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V1DLPViolationStreamResponse'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get violations as a result of policy enforcement on streams.
      tags:
      - Violations
  /v1/info:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        '200':
          description: Agent info.
          schema:
            $ref: '#/definitions/AgentInfo'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Get information about the Agent
      tags:
      - Signals
  /v1/message/search:
    get:
      description: "Search messages according to the specified criteria. The \"query\"\
        \ parameter takes a search query defined as\n\"field:value\" pairs combined\
        \ by the operator \"AND\" (e.g. \"text:foo AND autor:bar\"). Supported fields\
        \ are\n (case-insensitive): \"text\", \"author\", \"hashtag\", \"cashtag\"\
        , \"mention\", \"signal\", \"fromDate\", \"toDate\",\n \"streamId\", \"streamType\"\
        .\n \"text\" search requires a \"streamId\" to be specified.\n \"streamType\"\
        \ accepts one of the following values: \"chat\" (IMs and MIMs), \"im\", \"\
        mim\", \"chatroom\", \"post\".\n \"signal\" queries can only be combined with\
        \ \"fromDate\", \"toDate\", \"skip\" and \"limit\" parameters.\n"
      parameters:
      - description: The search query. See above for the query syntax.
        in: query
        name: query
        required: true
        type: string
      - description: 'No. of results to skip.

          '
        in: query
        name: skip
        type: integer
      - description: 'Max no. of results to return. If no value is provided, 50 is
          the default.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Describes where content should be searched for that query.

          It can exclusively apply to Symphony content or to one Connector.

          '
        in: query
        name: scope
        type: string
      - description: 'Messages sort direction : ASC or DESC (default to DESC)

          '
        in: query
        name: sortDir
        required: false
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V4MessageList'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Search messages
      tags:
      - Messages
    post:
      consumes:
      - application/json
      description: 'Search messages according to the specified criteria.

        '
      parameters:
      - description: The search query. See above for the query syntax.
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/MessageSearchQuery'
      - description: 'No. of results to skip.

          '
        in: query
        name: skip
        type: integer
      - description: 'Max no. of results to return. If no value is provided, 50 is
          the default.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: 'Describes where content should be searched for that query.

          It can exclusively apply to Symphony content or to one Connector.

          '
        in: query
        name: scope
        type: string
      - description: 'Messages sort direction : ASC or DESC (default to DESC)

          '
        in: query
        name: sortDir
        required: false
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V4MessageList'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Search messages
      tags:
      - Messages
  /v1/message/{id}:
    get:
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Message ID as a URL-safe string
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V4Message'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Get a message by ID
      tags:
      - Messages
  /v1/signals/create:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: Signal definition.
        in: body
        name: signal
        required: true
        schema:
          $ref: '#/definitions/BaseSignal'
      produces:
      - application/json
      responses:
        '200':
          description: Signal created.
          schema:
            $ref: '#/definitions/Signal'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '451':
          description: Compliance Issues found in signal
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Create a signal.
      tags:
      - Signals
  /v1/signals/list:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: 'No. of signals to skip.

          '
        in: query
        name: skip
        type: integer
      - description: 'Max no. of signals to return. If no value is provided, 50 is
          the default. The maximum supported value is 500.

          '
        in: query
        name: limit
        required: false
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: List of signals for the requesting user.
          schema:
            $ref: '#/definitions/SignalList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: 'List signals for the requesting user. This includes signals that the
        user has created and public signals

        to which they subscribed.

        '
      tags:
      - Signals
  /v1/signals/{id}/delete:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: The id of the signal.
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: Signal deleted.
          schema:
            $ref: '#/definitions/SuccessResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Delete a signal.
      tags:
      - Signals
  /v1/signals/{id}/get:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: 'The ID of the signal to display.

          '
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: List of signals for the requesting user.
          schema:
            $ref: '#/definitions/Signal'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Get details of the requested signal.
      tags:
      - Signals
  /v1/signals/{id}/subscribe:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: The id of the signal.
        in: path
        name: id
        required: true
        type: string
      - description: Prevent the user to unsubscribe (only for bulk subscription)
        in: query
        name: pushed
        required: false
        type: boolean
      - description: UserIds to subscribe (only for bulk subscription)
        in: body
        name: users
        required: false
        schema:
          items:
            format: int64
            type: integer
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: Signal subscribed.
          schema:
            $ref: '#/definitions/ChannelSubscriptionResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Subscribe to a Signal.
      tags:
      - Signals
  /v1/signals/{id}/subscribers:
    get:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: The id of the signal.
        in: path
        name: id
        required: true
        type: string
      - default: 0
        description: No. of results to skip.
        in: query
        name: skip
        required: false
        type: integer
      - default: 100
        description: Max No. of subscribers to return. If no value is provided, 100
          is the default.
        in: query
        name: limit
        required: false
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: Signal Subscribers.
          schema:
            $ref: '#/definitions/ChannelSubscriberResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Get the subscribers of a signal
      tags:
      - Signals
  /v1/signals/{id}/unsubscribe:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: The id of the signal.
        in: path
        name: id
        required: true
        type: string
      - description: UserIds to unsubscribe (only for bulk unsubscription)
        in: body
        name: users
        required: false
        schema:
          items:
            format: int64
            type: integer
          type: array
      produces:
      - application/json
      responses:
        '200':
          description: Signal unsubscribed.
          schema:
            $ref: '#/definitions/ChannelSubscriptionResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Unsubscribe to a Signal.
      tags:
      - Signals
  /v1/signals/{id}/update:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: The id of the signal.
        in: path
        name: id
        required: true
        type: string
      - description: Signal definition.
        in: body
        name: signal
        required: true
        schema:
          $ref: '#/definitions/BaseSignal'
      produces:
      - application/json
      responses:
        '200':
          description: Signal updated.
          schema:
            $ref: '#/definitions/Signal'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '451':
          description: Compliance Issues found in signal
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Update a signal.
      tags:
      - Signals
  /v1/stream/{sid}/attachment:
    get:
      consumes:
      - application/json
      description: 'Downloads the attachment body by the attachment ID, stream ID,
        and message ID.

        '
      parameters:
      - description: Stream ID
        in: path
        name: sid
        required: true
        type: string
      - description: The attachment ID (Base64-encoded)
        in: query
        name: fileId
        required: true
        type: string
      - description: The ID of the message containing the attachment
        in: query
        name: messageId
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        '200':
          description: Attachment body as Base64 encoded string.
          schema:
            format: byte
            type: string
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Download an attachment.
      tags:
      - Attachments
  /v1/util/echo:
    post:
      consumes:
      - application/json
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Message in plain text
        in: body
        name: echoInput
        required: true
        schema:
          $ref: '#/definitions/SimpleMessage'
      produces:
      - application/json
      responses:
        '200':
          description: Message sent.
          schema:
            $ref: '#/definitions/SimpleMessage'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Test endpoint, returns input.
      tags:
      - Util
  /v3/dlp/policies:
    get:
      description: Get all policies
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Optional parameter to specify which page to return (default is
          0)
        format: int32
        in: query
        name: page
        required: false
        type: integer
      - description: 'Optional parameter to specify the number of result to return
          per page, default is 50. Maximum is 50.

          '
        format: int32
        in: query
        name: limit
        required: false
        type: integer
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V3DLPPoliciesCollectionResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get all policies
      tags:
      - DLP Policies and Dictionary Management
    post:
      consumes:
      - application/json
      description: 'Creates a new policy with dictionary references.

        At the time of policy creation, the caller should only provide - contentTypes,
        name, scopes and type.

        The rest of the information is populated automatically.

        Note - You need to enable the policy after creation to start enforcing the
        policy.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Details about the policy that should be created.
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/V3DLPPolicyRequest'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V3DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Creates a policy
      tags:
      - DLP Policies and Dictionary Management
  /v3/dlp/policies/{policyId}:
    get:
      description: Get a policy
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier.
        in: path
        name: policyId
        required: true
        type: string
      - description: 'Optional parameter, if set to be valid policy version number,  will
          return policy with specified policyVersion. Otherwise, return the latest
          policy.

          '
        in: query
        name: policyVersion
        required: false
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V3DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get a policy
      tags:
      - DLP Policies and Dictionary Management
  /v3/dlp/policies/{policyId}/delete:
    post:
      description: 'Delete a policy.

        Note: Only disabled policy can be deleted

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier.
        in: path
        name: policyId
        required: true
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V3DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a policy
      tags:
      - DLP Policies and Dictionary Management
  /v3/dlp/policies/{policyId}/disable:
    post:
      description: Disables a policy.
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - in: path
        name: policyId
        required: true
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V3DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Disables a policy.
      tags:
      - DLP Policies and Dictionary Management
  /v3/dlp/policies/{policyId}/enable:
    post:
      description: Enables a policy.
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - in: path
        name: policyId
        required: true
        type: string
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V3DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Enables a policy.
      tags:
      - DLP Policies and Dictionary Management
  /v3/dlp/policies/{policyId}/update:
    post:
      consumes:
      - application/json
      description: 'Update the policy (name, type, contentTypes, scopes) and also
        the dictionaries for a policy.

        Warning: If you send empty list of dictionaries during the update operation,
        then all the

        dictionaries for this policy are deleted and policy is automatically disabled.

        Note: The policy should already exist.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: Unique dictionary identifier.
        in: path
        name: policyId
        required: true
        type: string
      - in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/V3DLPPolicyRequest'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V3DLPPolicyResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Updates a policy. Cannot be used for creation.
      tags:
      - DLP Policies and Dictionary Management
  /v3/dlp/violation/attachment:
    get:
      description: Retrieves attachments from related message violations as a base64
        encoded String.
      parameters:
      - description: 'ID of attachment that will be downloaded.

          '
        in: query
        name: fileId
        required: true
        type: string
      - description: 'ID of violation that corresponds to the flagged message that
          contains the attachment

          '
        in: query
        name: violationId
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/octet-stream
      responses:
        '200':
          description: Attachment body as Base64 encoded string.
          schema:
            format: byte
            type: string
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '404':
          description: Resource not found.
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get attachments that were sent as part of messages that were flagged
        by the DLP System.
      tags:
      - Violations
  /v3/dlp/violations/message:
    get:
      description: Retrieves DLP v3 message related violations for a given time range
      parameters:
      - description: 'Timestamp of the first required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          '
        format: int64
        in: query
        name: startTime
        required: true
        type: integer
      - description: 'Timestamp of the last required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          If unspecified, it will default to current time of the request.

          '
        format: int64
        in: query
        name: endTime
        required: false
        type: integer
      - description: 'Offset of the next chunk of violations. Value is null for the
          first request.

          '
        in: query
        name: next
        required: false
        type: string
      - description: 'Max No. of violations to return. If no value is provided, 50
          is the default. The maximum supported value is 500.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V3DLPViolationMessageResponse'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get violations as a result of policy enforcement on messages.
      tags:
      - Violations
  /v3/dlp/violations/signal:
    get:
      description: Retrieves DLP v3 signal related violations for a given time range
      parameters:
      - description: 'Timestamp of the first required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          '
        format: int64
        in: query
        name: startTime
        required: true
        type: integer
      - description: 'Timestamp of the last required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          If unspecified, it will default to current time of the request.

          '
        format: int64
        in: query
        name: endTime
        required: false
        type: integer
      - description: 'Offset of the next chunk of violations. Value is null for the
          first request.

          '
        in: query
        name: next
        required: false
        type: string
      - description: 'Max No. of violations to return. If no value is provided, 50
          is the default. The maximum supported value is 500.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V3DLPViolationSignalResponse'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get violations as a result of policy enforcement on signals.
      tags:
      - Violations
  /v3/dlp/violations/stream:
    get:
      description: Retrieves DLP v3 signal related violations for a given time range
      parameters:
      - description: 'Timestamp of the first required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          '
        format: int64
        in: query
        name: startTime
        required: true
        type: integer
      - description: 'Timestamp of the last required violation.

          This is a long integer value representing milliseconds since Jan 1 1970

          If unspecified, it will default to current time of the request.

          '
        format: int64
        in: query
        name: endTime
        required: false
        type: integer
      - description: 'Offset of the next chunk of violations. Value is null for the
          first request.

          '
        in: query
        name: next
        required: false
        type: string
      - description: 'Max No. of violations to return. If no value is provided, 50
          is the default. The maximum supported value is 500.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V3DLPViolationStreamResponse'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Get violations as a result of policy enforcement on streams.
      tags:
      - Violations
  /v3/health:
    get:
      consumes:
      - application/json
      description: '_Available on Agent 2.57.0 and above._


        Returns the connectivity status of your Agent server. If your Agent server
        is started and running, the status value will be `UP`

        '
      operationId: v3Health
      produces:
      - application/json
      responses:
        '200':
          description: Agent application is alive.
          schema:
            $ref: '#/definitions/V3Health'
      summary: Checks health status
      tags:
      - System
  /v3/health/extended:
    get:
      consumes:
      - application/json
      description: '_Available on Agent 2.57.0 and above._


        Returns the connectivity status of the Agent services (**pod**, **key manager**
        and **datafeed**) as well as users

        connectivity (**agentservice** and **ceservice**).


        The global status will be set to `DOWN` if at least one of the sub-status
        is also `DOWN`.

        '
      operationId: v3ExtendedHealth
      produces:
      - application/json
      responses:
        '200':
          description: Agent is healthy, all components are `UP`.
          schema:
            $ref: '#/definitions/V3Health'
        '503':
          description: Agent is unhealthy, some components are `DOWN`.
          schema:
            $ref: '#/definitions/V3Health'
      summary: Checks health status of services and users
      tags:
      - System
  /v3/stream/{sid}/share:
    post:
      consumes:
      - application/json
      description: 'Given a 3rd party content (eg. news article), it can share to
        the given stream.

        The stream can be a chatroom, an IM or a multiparty IM.

        '
      parameters:
      - description: Stream ID
        in: path
        name: sid
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - in: body
        name: shareContent
        required: true
        schema:
          $ref: '#/definitions/ShareContent'
      produces:
      - application/json
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/V2Message'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: PROVISIONAL -  Share a piece of content into Symphony
      tags:
      - Share
  /v4/message/blast:
    post:
      consumes:
      - multipart/form-data
      description: 'Post a new message to the given list of streams. The stream can
        be a chatroom,

        an IM or a multiparty IM.


        You may include an attachment on the message.


        The message can be provided as MessageMLV2 or PresentationML. Both formats
        support Freemarker templates.


        The optional parameter "data" can be used to provide a JSON payload containing
        entity data.

        If the message contains explicit references to entity data (in "data-entity-id"
        element attributes),

        this parameter is required.


        If the message is in MessageML and fails schema validation a client error
        results


        This endpoint is idempotent, it means that a 200 response will be returned
        even if the message has not been

        delivered to some streams. Check the `errors` map from the response in order
        to see on which stream(s) the

        message has not been delivered.


        The maximum number of streams where the message can be sent is limitted to
        100.


        Regarding authentication, you must either use the sessionToken which was created
        for delegated app access

        or both the sessionToken and keyManagerToken together.

        '
      parameters:
      - description: Authorization token used to make delegated calls.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: A comma-separated list of Stream IDs
        in: formData
        items:
          type: string
        name: sids
        required: true
        type: array
      - description: The message payload in MessageML.
        in: formData
        name: message
        required: false
        type: string
      - description: Optional message data in EntityJSON.
        in: formData
        name: data
        required: false
        type: string
      - description: 'Optional message version in the format "major.minor". If empty,
          defaults to the latest supported version.

          '
        in: formData
        name: version
        required: false
        type: string
      - description: Optional file attachment.
        in: formData
        name: attachment
        required: false
        type: file
      - description: Optional attachment preview.
        in: formData
        name: preview
        required: false
        type: file
      produces:
      - application/json
      responses:
        '200':
          description: Blast message sent.
          schema:
            $ref: '#/definitions/V4MessageBlastResponse'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '451':
          description: Compliance Issues found in message or file
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Post a message to multiple existing streams.
      tags:
      - Messages
  /v4/message/import:
    post:
      consumes:
      - application/json
      description: 'Sends a message to be imported into the system.

        Allows you to override the timestamp and author of the message with your desired
        values.

        The requesting user must have the Content Management role.

        The user that the message is intended to have come from must also be present
        in the conversation.

        The intended message timestamp must be a valid time from the past. It cannot
        be a future timestamp.

        Optionally the original message ID can be specified to identify the imported
        message for the purpose of repeat imports.

        '
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - in: body
        name: messageList
        required: true
        schema:
          $ref: '#/definitions/V4MessageImportList'
      produces:
      - application/json
      responses:
        '200':
          description: Message sent.
          schema:
            $ref: '#/definitions/V4ImportResponseList'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Import messages from other systems into Symphony.
      tags:
      - Messages
  /v4/stream/{sid}/message:
    get:
      description: 'A caller can fetch all unseen messages by passing the timestamp
        of

        the last message seen as the since parameter and the number of messages

        with the same timestamp value already seen as the skip parameter. This

        means that every message will be seen exactly once even in the case that

        an additional message is processed with the same timestamp as the last

        message returned by the previous call, and the case where there are

        more than maxMessages with the same timestamp value.


        This method is intended for historic queries and is generally reliable

        but if guaranteed delivery of every message in real time is required

        then the equivilent firehose method should be called.

        '
      parameters:
      - description: 'Stream ID

          '
        in: path
        name: sid
        required: true
        type: string
      - description: 'Timestamp of first required message.


          This is a long integer value representing milliseconds since

          Jan 1 1970

          '
        format: int64
        in: query
        name: since
        required: true
        type: integer
      - description: 'No. of messages to skip.

          '
        in: query
        name: skip
        type: integer
      - description: 'Max No. of messages to return. If no value is provided, 50 is
          the default. The maximum supported value is 500.

          '
        in: query
        name: limit
        required: false
        type: integer
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/V4MessageList'
        '204':
          description: No Messages.
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Get messages from an existing stream.
      tags:
      - Messages
  /v4/stream/{sid}/message/create:
    post:
      consumes:
      - multipart/form-data
      description: 'Post a new message to the given stream. The stream can be a chatroom,

        an IM or a multiparty IM.


        You may include an attachment on the message.


        The message can be provided as MessageMLV2 or PresentationML. Both formats
        support Freemarker templates.


        The optional parameter "data" can be used to provide a JSON payload containing
        entity data.

        If the message contains explicit references to entity data (in "data-entity-id"
        element attributes),

        this parameter is required.


        If the message is in MessageML and fails schema validation

        a client error results


        If the message is sent then 200 is returned.


        Regarding authentication, you must either use the sessionToken which was created
        for delegated app access

        or both the sessionToken and keyManagerToken together.

        '
      parameters:
      - description: Stream ID
        in: path
        name: sid
        required: true
        type: string
      - description: Authorization token used to make delegated calls.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: The message payload in MessageML.
        in: formData
        name: message
        required: false
        type: string
      - description: Optional message data in EntityJSON.
        in: formData
        name: data
        required: false
        type: string
      - description: 'Optional message version in the format "major.minor". If empty,
          defaults to the latest supported version.

          '
        in: formData
        name: version
        required: false
        type: string
      - description: Optional file attachment.
        in: formData
        name: attachment
        required: false
        type: file
      - description: Optional attachment preview.
        in: formData
        name: preview
        required: false
        type: file
      produces:
      - application/json
      responses:
        '200':
          description: Message sent.
          schema:
            $ref: '#/definitions/V4Message'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '451':
          description: Compliance Issues found in message or file
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Post a message to one existing stream.
      tags:
      - Messages
  /v4/stream/{sid}/message/{mid}/update:
    post:
      consumes:
      - multipart/form-data
      description: 'Update an existing message. The existing message must be a valid
        social message, that has not been deleted.


        The message can be provided as MessageMLV2 or PresentationML. Both formats
        support Freemarker templates.


        The optional parameter "data" can be used to provide a JSON payload containing
        entity data.

        If the message contains explicit references to entity data (in "data-entity-id"
        element attributes),

        this parameter is required.


        If the message is in MessageML and fails schema validation

        a client error results


        If the message is updated then 200 is returned.


        Regarding authentication, you must either use the sessionToken which was created
        for delegated app access

        or both the sessionToken and keyManagerToken together.

        '
      parameters:
      - description: Stream ID
        in: path
        name: sid
        required: true
        type: string
      - description: Parent message ID
        in: path
        name: mid
        required: true
        type: string
      - description: Authorization token used to make delegated calls.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: false
        type: string
      - description: The message payload in MessageML.
        in: formData
        name: message
        required: false
        type: string
      - description: Optional message data in EntityJSON.
        in: formData
        name: data
        required: false
        type: string
      - description: 'Optional message version in the format "major.minor". If empty,
          defaults to the latest supported version.

          '
        in: formData
        name: version
        required: false
        type: string
      - description: 'Optional boolean field that will determine if the user/s should
          receive the message as read or not (true by default). Since Agent 20.14.

          '
        in: formData
        name: silent
        required: false
        type: string
        x-since: 20.14
      produces:
      - application/json
      responses:
        '200':
          description: Message sent.
          schema:
            $ref: '#/definitions/V4Message'
        '400':
          description: Client error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
        '401':
          description: 'Unauthorized: Session tokens invalid.'
          schema:
            $ref: '#/definitions/V2Error'
        '403':
          description: 'Forbidden: Caller lacks necessary entitlement.'
          schema:
            $ref: '#/definitions/V2Error'
        '451':
          description: Compliance Issues found in message or file
          schema:
            $ref: '#/definitions/V2Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Update an existing message.
      tags:
      - Messages
  /v5/datafeeds:
    get:
      description: '_Available on Agent 2.57.0 and above._


        The datafeed provides messages and events from all conversations that the
        user

        is in. The types of events surfaced in the datafeed can be found in the [Real
        Time Events](./docs/real-time-events.md) list.


        Returns the list of the datafeeds for the user.

        Any datafeed ID of the list can then be used as input to the Read Messages/Events
        Stream v4 endpoint.

        '
      operationId: listDatafeed
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: A unique identifier to ensure uniqueness of the datafeed. Used
          to restrict search.
        in: query
        maxLength: 100
        name: tag
        required: false
        type: string
      produces:
      - application/json
      responses:
        200:
          description: Datafeed sucessfully created.
          examples:
            application/json:
            - createdAt: 1536346282592
              id: 8e7c8672-220...
            - createdAt: 1536346282500
              id: 8e7c8672-221...
          schema:
            items:
              $ref: '#/definitions/V5Datafeed'
            type: array
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/V2Error'
        401:
          description: Unauthorized.
          schema:
            $ref: '#/definitions/V2Error'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Read list of real time messages / events stream ("datafeed").
      tags:
      - Datafeed
    post:
      description: '_Available on Agent 2.57.0 and above._


        The datafeed provides messages and events from all conversations that the
        user

        is in. The types of events surfaced in the datafeed can be found in the Real
        Time Events list.

        (see definition on top of the file)


        Returns the ID of the datafeed that has just been created.

        This ID should then be used as input to the Read Messages/Events Stream v4
        endpoint.

        '
      operationId: createDatafeed
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - in: body
        name: body
        required: false
        schema:
          $ref: '#/definitions/V5DatafeedCreateBody'
      produces:
      - application/json
      responses:
        201:
          description: Datafeed sucessfully created.
          schema:
            $ref: '#/definitions/V5Datafeed'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/V2Error'
        401:
          description: Unauthorized.
          schema:
            $ref: '#/definitions/V2Error'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Create a new real time messages / events stream ("datafeed").
      tags:
      - Datafeed
  /v5/datafeeds/{datafeedId}:
    delete:
      description: '_Available on Agent 2.57.0 and above._


        The datafeed provides messages and events from all conversations that the
        user

        is in. The types of events surfaced in the datafeed can be found in the Real
        Time Events list.

        (see definition on top of the file)


        Delete the specified datafeed.

        '
      operationId: deleteDatafeed
      parameters:
      - description: ID of the datafeed
        in: path
        name: datafeedId
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      responses:
        204:
          description: Datafeed successfully deleted.
          schema:
            $ref: '#/definitions/V2Error'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/V2Error'
        401:
          description: Unauthorized.
          schema:
            $ref: '#/definitions/V2Error'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Delete the specified real time message / event stream ("datafeed").
      tags:
      - Datafeed
  /v5/datafeeds/{datafeedId}/read:
    post:
      consumes:
      - application/json
      description: '_Available on Agent 2.57.0 and above._


        The datafeed provides messages and events from all conversations that the
        user

        is in. The types of events surfaced in the datafeed can be found in the Real
        Time Events list.

        (see definition on top of the file)


        Read the specified datafeed.


        The ackId sent as parameter can be empty for the first call. In the response
        an ackId will be sent back and it can be used for

        the next call: in this way you acknowledge that you have received the events
        that came with that ackId; datafeed will remove the events

        associated with that ackId from your queue

        '
      operationId: readDatafeed
      parameters:
      - description: ID of the datafeed
        in: path
        name: datafeedId
        required: true
        type: string
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: ackId received from last POST Base64 encoded.
        in: body
        name: ackId
        required: false
        schema:
          $ref: '#/definitions/AckId'
      produces:
      - application/json
      responses:
        200:
          description: Datafeed successfully read.
          schema:
            $ref: '#/definitions/V5EventList'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/V2Error'
        401:
          description: Unauthorized.
          schema:
            $ref: '#/definitions/V2Error'
        403:
          description: Forbidden.
          schema:
            $ref: '#/definitions/V2Error'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Read the specified real time message / event stream ("datafeed").
      tags:
      - Datafeed
  /v5/events/read:
    post:
      consumes:
      - application/json
      description: "_Available on Agent 22.5 and above._\n\nThis endpoint provides\
        \ messages and events from all conversations that the user\nis in or events\
        \ from the whole pod depending on the \"type\" field value.\nWhen \"type\"\
        : \"fanout\" is provided in the body, then only events from streams the account\
        \ belongs to are returned.\nOtherwise, if \"type\": \"datahose\" is provided\
        \ in the body, then events returned are not limited to the streams user\n\
        belongs to. In this case, at least one event type must be provided in the\
        \ \"filters\" field. \nIn case you are using a datahose feed and retrieving\
        \ SOCIALMESSAGE events, ceservice account must be properly\nconfigured in\
        \ the Agent.\n\nThe types of events returned can be found in the Real Time\
        \ Events list (see definition on top of the file).\n\nThe ackId sent as parameter\
        \ can be empty for the first call. In the response an ackId will be sent back\
        \ and it can be used for\nthe next call: in this way you acknowledge that\
        \ you have received the events that came with that ackId.\n\nIf you have several\
        \ instances of the same bot, they must share the same feed so that events\
        \ are spread across\nall bot instances. To do so, you must:\n* share the same\
        \ service account\n* provide the same \"tag\" and same \"filters\" values\n"
      operationId: readEvents
      parameters:
      - description: Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: Key Manager authentication token.
        in: header
        name: keyManagerToken
        required: true
        type: string
      - description: body containing all information of events to be fetched
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/V5EventsReadBody'
      produces:
      - application/json
      responses:
        200:
          description: Datafeed successfully read.
          schema:
            $ref: '#/definitions/V5EventList'
        400:
          description: Bad request.
          schema:
            $ref: '#/definitions/V2Error'
        401:
          description: Unauthorized.
          schema:
            $ref: '#/definitions/V2Error'
        403:
          description: Forbidden.
          schema:
            $ref: '#/definitions/V2Error'
        500:
          description: Internal server error.
          schema:
            $ref: '#/definitions/V2Error'
      summary: Read Real Time Events from an event stream (aka datafeed)
      tags:
      - Datafeed
      x-since: 22.5
swagger: '2.0'
