definitions:
  AuthenticateExtensionAppRequest:
    description: Request body for extension app authentication
    properties:
      appToken:
        description: application generated token
        type: string
      authToken:
        description: a JWT containing the caller's username and an expiration date,
          signed by the caller's private key.
        type: string
    type: object
  AuthenticateRequest:
    description: Request body for pubkey authentication
    properties:
      token:
        description: a JWT containing the caller's username or application appGroupId
          and an expiration date, signed by the caller's private key.
        type: string
    type: object
  Error:
    properties:
      code:
        format: int32
        type: integer
      message:
        type: string
    type: object
  ExtensionAppTokens:
    properties:
      appId:
        description: Application ID
        type: string
      appToken:
        description: 'This token generated by the application when calling authentication
          endpoint

          '
        type: string
      expireAt:
        description: unix timestamp when the token expired
        format: int64
        type: integer
      symphonyToken:
        description: 'This token generated by Symphony and should be used by the application
          to verify that it''s talking to Symphony.

          '
        type: string
    type: object
  Jwks:
    properties:
      keys:
        items:
          $ref: '#/definitions/JwksEntry'
        type: array
    type: object
  JwksEntry:
    additionalProperties:
      type: string
    description: A JWK object as defined in https://datatracker.ietf.org/doc/html/rfc7517#section-4.
    type: object
  JwtToken:
    properties:
      access_token:
        description: 'A JWT containing the caller''s username or application, an expiration
          date and a set of entitlements related to the

          specified scope, signed by the caller''s private key.

          '
        type: string
      expires_in:
        description: Duration of time the access token is granted for in seconds
        format: int64
        type: integer
      token_type:
        description: Type of token, string "Bearer"
        type: string
    type: object
  Token:
    properties:
      authorizationToken:
        description: 'Short lived access token built from a user session. It can be
          used for the same purposes as the sessionToken

          and It should be passed as an header named "Authorization". At least one
          between SessionToken or Authorization

          header must me provided on subsequent API calls.

          '
        type: string
      name:
        description: 'The name of the header in which the token should be presented
          on subsequent API calls.

          '
        type: string
      token:
        description: 'Token that can be passed as header, it can be considered a refresh
          token along with the

          idm/tokens ("authorizationToken").

          This should be considered opaque data by the client. It is not intended
          to contain any data interpretable by the

          client. The format is secret and subject to change without notice.

          '
        type: string
    type: object
info:
  description: 'For bots and other on-premise processes to authenticate. Once

    authenticated, the bot will be able to use the methods described in

    serviceAPI.yaml and agentAPI.yaml.


    Authentication requests will expect the user to pass a token containing

    user identification information and signed by the user''s private key


    There will be two implementations of this API, one on your Pod

    and one on the Key Manager. In order to fully authenticate,

    an API client will have to call both of these implementations

    and pass both of the session tokens returned as headers in all

    subsequent requests to the Symphony API.

    '
  title: Login API
  version: 20.14.1
paths:
  /idm/keys:
    get:
      description: This is a public endpoint, no authentication is required. The JWKS
        can be used to verify JWT issued by the idm/tokens endpoint. Since SBE 20.14.
      produces:
      - application/json
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Jwks'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Returns the Common Access Token (JWT) public keys as a JWKS.
      tags:
      - Authentication
      x-since: 20.14
  /idm/tokens:
    post:
      consumes:
      - application/json
      parameters:
      - description: User session authentication token
        in: header
        name: sessionToken
        required: true
        type: string
      - description: 'Optional field used to get access with specific entitlements,
          use space separated list to define more that one

          '
        in: query
        name: scope
        required: false
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/JwtToken'
        '401':
          description: Client is unauthorized to access this resource
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden to access this endpoint .
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Returns a valid OAuth2 access token from a given session token to be
        used for authentication
      tags:
      - Authentication
  /pubkey/app/authenticate:
    post:
      consumes:
      - application/json
      description: 'Based on an authentication request token signed by the application''s
        RSA private key,

        authenticate the API caller and return a session token.


        A HTTP 401 Unauthorized error is returned on errors during authentication
        (e.g. invalid app,

        malformed authentication token, app''s public key not imported in the pod,
        invalid token signature etc.).

        '
      parameters:
      - in: body
        name: authenticateRequest
        required: true
        schema:
          $ref: '#/definitions/AuthenticateRequest'
      produces:
      - application/json
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Token'
        '401':
          description: Client is unauthorized to access this resource
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden to access this endpoint .
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Authenticate an App with public key
      tags:
      - Authentication
  /pubkey/app/user/{userId}/authenticate:
    post:
      consumes:
      - application/json
      parameters:
      - description: App Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: the user ID
        format: int64
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Token'
        '401':
          description: Client is unauthorized to access this resource
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden to access this endpoint .
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Authenticate an application in a delegated context to act on behalf
        of a user
      tags:
      - Authentication
  /pubkey/app/username/{username}/authenticate:
    post:
      consumes:
      - application/json
      parameters:
      - description: App Session authentication token.
        in: header
        name: sessionToken
        required: true
        type: string
      - description: the username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Token'
        '401':
          description: Client is unauthorized to access this resource
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden to access this endpoint .
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Authenticate an application in a delegated context to act on behalf
        of a user
      tags:
      - Authentication
  /pubkey/authenticate:
    post:
      consumes:
      - application/json
      description: 'Based on an authentication request token signed by the caller''s
        RSA private key,

        authenticate the API caller and return a session token.


        A HTTP 401 Unauthorized error is returned on errors during authentication
        (e.g. invalid user,

        malformed authentication token, user''s public key not imported in the pod,
        invalid token signature etc.).

        '
      parameters:
      - in: body
        name: authenticateRequest
        required: true
        schema:
          $ref: '#/definitions/AuthenticateRequest'
      produces:
      - application/json
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/Token'
        '401':
          description: Client is unauthorized to access this resource
          schema:
            $ref: '#/definitions/Error'
        '403':
          description: Forbidden to access this endpoint .
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Authenticate with public key
      tags:
      - Authentication
  /v1/pubkey/app/authenticate/extensionApp:
    post:
      consumes:
      - application/json
      description: 'Based on an authentication request token signed by the caller''s
        RSA private key,

        authenticate the API caller and return a session token.


        A HTTP 401 Unauthorized error is returned on errors during authentication
        (e.g. invalid user,

        malformed authentication token, user''s public key not imported in the pod,
        invalid token signature etc.).

        '
      parameters:
      - in: body
        name: authenticateRequest
        required: true
        schema:
          $ref: '#/definitions/AuthenticateExtensionAppRequest'
      produces:
      - application/json
      responses:
        '200':
          description: OK.
          schema:
            $ref: '#/definitions/ExtensionAppTokens'
        '400':
          description: Request object is invalid
          schema:
            $ref: '#/definitions/Error'
        '401':
          description: Client is unauthorized to access this resource
          schema:
            $ref: '#/definitions/Error'
        '500':
          description: Server error, see response body for further details.
          schema:
            $ref: '#/definitions/Error'
      summary: Authenticate extension app with public key
      tags:
      - Authentication
swagger: '2.0'
